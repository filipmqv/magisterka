#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass dcsbook
\begin_preamble
%
%  $Id: thesis-template.lyx,v 1.7 2011/12/22 12:10:18 sobaniec Exp $
%
\end_preamble
\options thesis,openany
\use_default_options false
\begin_modules
dcs
\end_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbph
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "urlcolor=linkcolor,linkcolor=linkcolor,citecolor=linkcolor"
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indeks
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Author
Filip Waligórski
\end_layout

\begin_layout Title
Rozgłaszanie danych w grafach dużej skali
\end_layout

\begin_layout Date
Poznań, 2017
\end_layout

\begin_layout Supervisor
dr Anna Kobusińska
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Subtitle
Bachelor's Thesis
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frontmatter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mainmatter
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Wstęp
\end_layout

\begin_layout Chapter
Istniejące rozwiązania
\end_layout

\begin_layout Standard
W tym rozdziale zaprezentowano istniejące komunikatory dla dwóch osób oraz
 komunikatory grupowe.
 Ich cele i funkcjonalność są zbliżone choć realizują je z różnymi założeniami
 oraz bazując na różnych architekturach i koncepcjach.
 Poniżej opisane zostały wybrane rozwiązania z naciskiem na cechy wyróżniające
 je spośród konkurencyjnych aplikacji.
 
\end_layout

\begin_layout Section
Bleep 
\end_layout

\begin_layout Standard
Bleep jest komunikatorem zaprojektowanym przez firmę rozwijającą protokół
 BitTorrent.
 Do dyspozycji użytkowników oddano aplikację mobilną oraz aplikację desktopową
 (brak aplikacji webowej).
 Kod źródłowy aplikacji nie został udostępniony (nie jest to open-source),
 co oznacza, że użytkownicy nie mogą upewnić się, czy aplikacja działa i
 została zaimplementowana zgodnie z założeniami.
 Bleep oferuje rozmowy dla dwóch osób, a w planach twórców ((?) powtórzenie)
 jest zaimplementowanie komunikacji grupowej.
 Wiadomości są szyfrowane przed wysłaniem na urządzeniu nadawcy i odszyfrowywane
 na urządzeniu odbiorcy – szyfrowanie end2end.
 (...)
\end_layout

\begin_layout Section
Signal 
\end_layout

\begin_layout Standard
Twórcy aplikacji Signal skupili się przede wszystkim na bezpieczeństwie
 i prywatności użytkowników.
 Wiadomości są szyfrowane na urządzeniach więc pomimo faktu, że architektura
 zakłada obecność centralnego serwera, wiadomości przechowywane na nim nie
 mogą zostać odczytane przez osoby trzecie.
 Kod źródłowy jest dostępny publicznie co oznacza, że każdy może sprawdzić
 zgodność implementacji z oferowanymi założeniami.
 Podobnie jak w przypadku aplikacji Bleep, dostępne są natywne aplikacje
 mobilna i desktopowa.
 Możliwe jest prowadzenie rozmowy grupowej.
 
\end_layout

\begin_layout Standard
Podobne rozwiązania: Wire
\end_layout

\begin_layout Section
Darkwire 
\end_layout

\begin_layout Standard
Darkwire to aplikacja open-source oferująca komunikator grupowy z dostępem
 poprzez stronę internetową (aplikacja webowa).
 W przeciwieństwie do większości rozwiązań użytkownik nie musi tworzyć konta
 by skorzystać z programu.
 W celu skomunikowania się z użytkownikami należy wymienić między nimi identyfik
ator czatu (link do konkretnego pokoju) za pośrednictwem innego kanału komunikac
yjnego (np.
 e-mail).
 Takie rozwiązanie zakłada, że identyfikator nie zostanie odgadnięty przez
 osoby trzecie – w przeciwnym przypadku będą one mogły odczytać wysyłane
 wiadomości.
 Architektura zakłada istnienie centralnego serwera uczestniczącego w przekazywa
niu wiadomości.
 Z racji faktu, że aplikacja ma otwarte źródła, każdy może uruchomić swój
 własny serwer.
 Komunikaty są szyfrowane na urządzeniu (w przeglądarce) przed wysłaniem,
 zatem serwer nie zna treści wiadomości.
 Centralny serwer przesyła wiadomości tylko do tych uczestników, którzy
 są dostępni w momencie nadania wiadomości (brak wsparcia dla odbierania
 starszych wiadomości).
 
\end_layout

\begin_layout Section
Friends 
\end_layout

\begin_layout Standard
Ten niszowy projekt open-source oferuje aplikację desktopową i umożliwia
 czat grupowy.
 Głównym celem twórców było stworzenie programu niezależnego od centralnego
 serwera oraz umożliwiającego rozmowę przy użyciu alternatywnych kanałów
 komunikacyjnych (np.
 poprzez Bluetooth) w sytuacji gdy połączenie internetowe jest niedostępne.
 Aplikacja wykorzystuje algorytm plotkowania (gossiping) oraz replikuje
 wiadomości przy użyciu drzewa skrótów (hash tree, Merkle DAG, DAG - Directed
 Acyclic Graph).
 Dzięki temu wiadomości w czacie mogą zostać połączone nawet w przypadku,
 gdy ktoś nadał komunikaty będąc odłączonym od sieci – mechanizm podobny
 do łączenia zmian w repozytorium kodu.
 Szyfrowanie wiadomości nie zostało do tej pory zrealizowane, ale jest jednym
 z punktów przyszłego rozwoju.
\end_layout

\begin_layout Section
Tox 
\end_layout

\begin_layout Standard
Tox jest z założenia rozproszonym i szyfrowanym protokołem do wymiany wiadomości.
 Powstało kilkanaście implementacji klientów obsługujących go co pozwala
 na komunikowanie się z użytkownikami różnych aplikacji.
 Wśród zaimplementowanych aplikacji są programy na komputery stacjonarne
 oraz smartfony.
 Wiadomości są przesyłane bezpośrednio między nadawcą i odbiorcą dlatego
 obie strony muszą być dostępne jednocześnie.
 Brak wsparcia dostarczania wiadomości gdy jedna strona jest niedostępna
 to duża wada wszystkich aplikacji implementujących ten rodzaj transmisji
 P2P.
 Jednym z rozwiązań tego problemu zaproponowanym przez twórców protokołu
 jest skorzystanie z serwerów, którym użytkownik ufa i których zadaniem
 jest przekazywanie wiadomości do odbiorcy pod nieobecność nadawcy.
 Narusza to jednak założenie o rozproszeniu systemu (braku centralnych węzłów).
 Wsparcie dla komunikacji grupowej jest jednym z celów rozwoju protokołu.
 
\end_layout

\begin_layout Section
ZeroChat, ZeroMail, BitMessage 
\end_layout

\begin_layout Standard
Przytoczone aplikacje to pomysły na komunikatory oparte o mechanizm podobny
 do transakcji kryptowalutowych.
 Wysłanie wiadomości wymaga obliczenia funkcji skrótu z zadanym prefiksem
 (proof of work) i umieszczenia bloku w łańcuchu (blockchain).
 Samo tylko wyliczenie funkcji skrótu powinno z definicji zająć około 4
 minut (https://bitmessage.org/bitmessage.pdf), podczas gdy pozostałe komunikatory
 dążą do uzyskania czasu dostarczenia wiadomości bliskiego zeru (rozmowa
 w czasie rzeczywistym).
 Mimo tej znaczącej wady należy potraktować te projekty jako próbę stworzenia
 rozwiązania o innej architekturze niż dotychczas zaprezentowane (centralny
 serwer lub P2P).
 Być może w przyszłości wady uda się zminimalizować, a zalety architektury
 opartej o blockchain okażą się kluczowe.
 
\end_layout

\begin_layout Chapter
Koncepcja
\end_layout

\begin_layout Chapter
Architektura
\end_layout

\begin_layout Chapter
Wyniki testów
\end_layout

\begin_layout Chapter
Wnioski
\end_layout

\end_body
\end_document
