#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ../../texmf/tex/latex/commonstuff/dcsbook
\begin_preamble
%
%  $Id: thesis-template.lyx,v 1.7 2011/12/22 12:10:18 sobaniec Exp $
%
\usepackage{etoolbox}

\makeatletter
\patchcmd{\ttlh@hang}{\parindent\z@}{\parindent\z@\leavevmode}{}{}
\patchcmd{\ttlh@hang}{\noindent}{}{}{}
\makeatother
\end_preamble
\options thesis, openany
\use_default_options false
\begin_modules
dcs
\end_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex8
\index_command default
\float_placement tbph
\paperfontsize 12
\spacing onehalf
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "urlcolor=linkcolor,linkcolor=linkcolor,citecolor=linkcolor"
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indeks
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Author
Filip Waligórski
\end_layout

\begin_layout Title
Komunikacja między użytkownikami w
\begin_inset space ~
\end_inset

społecznościowym systemie dużej skali
\end_layout

\begin_layout Date
Poznań, 2017
\end_layout

\begin_layout Supervisor
dr Anna Kobusińska
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Subtitle
Bachelor's Thesis
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frontmatter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mainmatter
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Wstęp
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\begin_layout Itemize
powiązanie społecznościowego systemu dużej skali z komunikatorem grupowym
\end_layout

\begin_layout Itemize
literatura do pojęć np P2P, komunikator [IM 1] – dodać instant messaging
 , w IM 1 jest opisane jak to działą itp; w miarę jak najświeższa
\end_layout

\begin_layout Itemize
arch rozproszona - są różne, klient-serwer czy DSM to też rozproszone; doprecyzo
wać
\end_layout

\begin_layout Itemize
P2P=sieć=system=architektura, bo później jest wspomniane 
\begin_inset Quotes pld
\end_inset

sieć P2P
\begin_inset Quotes prd
\end_inset

 i nie wiadomo że to się do tego samego odnosi
\end_layout

\begin_layout Itemize
centra przetwarzania - kosztowne –> praktyka firm = gromadzenie i analiza
 danych –> spersonal reklamy –> darmowy komunikator
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Komunikatory 
\begin_inset CommandInset citation
LatexCommand cite
key "IM 1,IM 2,IM 3"

\end_inset

 zrewolucjonizowały sposób, w
\begin_inset space ~
\end_inset

jaki ludzie wymieniają się informacjami.
 Pozwalają na niemalże natychmiastowe wysłanie dowolnej treści (tekstu,
 zdjęcia, filmu) w
\begin_inset space ~
\end_inset

formie wiadomości do grona odbiorców — najczęściej znajomych.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO wycięte w tym miejscu
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO !!!!! 
\end_layout

\begin_layout Plain Layout
poniżej jest wspomniane o architekturach, ale to było w kontekście obrazka;
 teraz jest usunięte - jak to wpływa na dalszą część?
\end_layout

\begin_layout Plain Layout
!
\end_layout

\begin_layout Plain Layout
!
\end_layout

\begin_layout Plain Layout
!
\end_layout

\begin_layout Plain Layout
!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Pod pojęciem 
\begin_inset Quotes pld
\end_inset

serwer
\begin_inset Quotes prd
\end_inset

 na rysunku {{nie ma już rysunku}}
\end_layout

\end_inset

 kryje się zwykle jedno lub wiele centrów przetwarzania danych, których
 utrzymanie jest niezwykle kosztowne ze względu na duże obciążenie systemu.
 Częstą praktyką firm jest gromadzenie i
\begin_inset space ~
\end_inset

analizowanie danych o
\begin_inset space ~
\end_inset

użytkownikach, aby na tej podstawie generować spersonalizowane reklamy i
\begin_inset space ~
\end_inset

osiągać zyski.
 Dzięki temu komunikator jest darmowy dla użytkowników, choć 
\begin_inset Quotes pld
\end_inset

płacą
\begin_inset Quotes prd
\end_inset

 oni za korzystanie swoją prywatnością 
\begin_inset CommandInset citation
LatexCommand cite
key "fb-personalizowane reklamy"

\end_inset

.
 Wyeliminowanie kosztów (serwerów pośredniczących) pozwoliłoby na zrezygnowanie
 z
\begin_inset space ~
\end_inset

tej 
\begin_inset Note Note
status open

\begin_layout Plain Layout
praktyki {{jakiej praktyki?}}
\end_layout

\end_inset

.
 W
\begin_inset space ~
\end_inset

tym celu możliwe jest zastosowanie architektury rozproszonej P2P.
\end_layout

\begin_layout Standard
BitTorrent jest jednym z
\begin_inset space ~
\end_inset

najpopularniejszych protokołów służących do dystrybucji plików w
\begin_inset space ~
\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
sieci
\end_layout

\end_inset

 P2P.
 Automatycznie dzieli udostępniane pliki na części i
\begin_inset space ~
\end_inset

umożliwia ich pobieranie z
\begin_inset space ~
\end_inset

wielu źródeł, na przykład od innych użytkowników.
 Pozwala to na równomierne rozłożenie obciążenia pomiędzy komputery biorące
 udział w
\begin_inset space ~
\end_inset

udostępnianiu plików oraz umożliwia dalsze pobieranie nawet gdy pierwotny
 nadawca pliku jest niedostępny.
 W
\begin_inset space ~
\end_inset

niniejszej pracy protokół został użyty do przekazywania wiadomości.
\end_layout

\begin_layout Standard
WebTorrent to biblioteka implementująca protokół BitTorrent.
 Została napisana w
\begin_inset space ~
\end_inset

języku JavaScript, dzięki czemu możliwe jest użycie jej w
\begin_inset space ~
\end_inset

aplikacji webowej — pozwala na wymianę plików pomiędzy przeglądarkami.
 
\end_layout

\begin_layout Standard
Celem pracy jest zaprojektowanie i
\begin_inset space ~
\end_inset

implementacja systemu komunikatora grupowego w
\begin_inset space ~
\end_inset

formie aplikacji webowej.
 Jednocześnie, założeniem jest jak największe wykorzystanie modelu komunikacji
 P2P w
\begin_inset space ~
\end_inset

projekcie, aby minimalizować rolę serwerów w
\begin_inset space ~
\end_inset

systemie.
 Dzięki temu komunikator powinien generować jak najmniejsze koszty.
 Do obsługi bezpośredniej komunikacji pomiędzy klientami, a
\begin_inset space ~
\end_inset

konkretnie do przesyłania wiadomości, wykorzystano wspomnianą bibliotekę
 WebTorrent.
 W
\begin_inset space ~
\end_inset

dalszej kolejności zbadano możliwości poprawy bezpieczeństwa przetwarzanych
 danych oraz zwiększenia prywatności użytkowników poprzez wprowadzenie szyfrowan
ia wiadomości.
 
\end_layout

\begin_layout Standard
W kolejnych rozdziałach podsumowano wyniki pracy wykonanej w
\begin_inset space ~
\end_inset

celu wdrożenia opisanego systemu.
 Rozdział 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:istniejace rozwiazania"

\end_inset

 opisuje istniejące obecnie na rynku komunikatory.
 W
\begin_inset space ~
\end_inset

rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Koncepcja"

\end_inset

 zawarto teoretyczne podstawy działania protokołu BitTorrent, niezbędne
 do opracowania koncepcji jego wykorzystania w
\begin_inset space ~
\end_inset

kontekście komunikatora.
 Rozdział 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Architektura"

\end_inset

 zawiera informacje dotyczące projektu systemu — opis architektury i
\begin_inset space ~
\end_inset

sposób działania poszczególnych modułów.
 Znalazły się w
\begin_inset space ~
\end_inset

nim również wnioski z
\begin_inset space ~
\end_inset

badań dotyczących szyfrowania wiadomości.
 Na koniec przeprowadzono i
\begin_inset space ~
\end_inset

udokumentowano testy wydajnościowe aplikacji — wyniki znajdują się w
\begin_inset space ~
\end_inset

rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Wyniki testów"

\end_inset

.
\end_layout

\begin_layout Chapter
Istniejące rozwiązania
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap:istniejace rozwiazania"

\end_inset


\end_layout

\begin_layout Standard
W tym rozdziale zaprezentowano istniejące komunikatory dla dwóch osób oraz
 komunikatory grupowe.
 Ich cele i
\begin_inset space ~
\end_inset

funkcjonalność są zbliżone choć realizują je z
\begin_inset space ~
\end_inset

różnymi założeniami oraz bazując na różnych architekturach i
\begin_inset space ~
\end_inset

koncepcjach.
 Poniżej opisane zostały wybrane rozwiązania z
\begin_inset space ~
\end_inset

naciskiem na cechy wyróżniające je spośród konkurencyjnych aplikacji.
 
\end_layout

\begin_layout Section
Facebook Messenger 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:messenger"

\end_inset


\end_layout

\begin_layout Standard
Jest to jeden z
\begin_inset space ~
\end_inset

najpopularniejszych obecnie komunikatorów 
\begin_inset CommandInset citation
LatexCommand cite
key "messenger"

\end_inset

.
 Oferuje zarówno rozmowy dla 2 osób jak i
\begin_inset space ~
\end_inset

grupowe.
 Wspiera wysyłanie wszelkich multimediów i
\begin_inset space ~
\end_inset

plików oraz dostarczanie wiadomości pod nieobecność nadawcy.
 Dostępny jest na najszerszej gamie platform — jako aplikacja webowa, mobilna
 oraz desktopowa, czym wyróżnia się na tle konkurencji.
 Architektura systemu Facebook Messenger składa się z aplikacji klienckich
 oraz centralnych serwerów pośredniczących w przekazywaniu wiadomości.
 Z
\begin_inset space ~
\end_inset

komunikatora korzysta 1,2 miliarda użytkowników na całym świecie 
\begin_inset CommandInset citation
LatexCommand cite
key "messenger uzytkownicy"

\end_inset

.
 Tak wysoka popularność sprawia, że konieczne jest utrzymanie wielu współpracują
cych serwerów znajdujących się w centrach przetwarzania danych.
\end_layout

\begin_layout Standard
Wadą tego komunikatora jest brak domyślnego wsparcia szyfrowania wiadomości
 — opcję można włączyć tylko w
\begin_inset space ~
\end_inset

aplikacji mobilnej dla poszczególnych konwersacji, jednak nie każdy użytkownik
 jest tej opcji świadomy.
 Szyfrowanie w
\begin_inset space ~
\end_inset

aplikacji webowej nie jest dostępne 
\begin_inset CommandInset citation
LatexCommand cite
key "messenger-encryption"

\end_inset

.
 Kod źródłowy aplikacji nie został udostępniony (nie jest to open-source),
 co oznacza, że za wprowadzanie zmian i
\begin_inset space ~
\end_inset

dodawanie nowych funkcji odpowiedzialny jest tylko wydawca — społeczność
 użytkowników nie ma możliwości ingerowania w
\begin_inset space ~
\end_inset

funkcjonalność.
 Jest to wada w
\begin_inset space ~
\end_inset

sytuacji, gdy nowa wersja oprogramowania zawiera niechciane przez użytkowników
 dodatki (zbędne lub na przykład szpiegujące), a
\begin_inset space ~
\end_inset

nie zawiera takich, które są przez nich wyczekiwane.
\end_layout

\begin_layout Section
Bleep 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:bleep"

\end_inset


\end_layout

\begin_layout Standard
Bleep 
\begin_inset CommandInset citation
LatexCommand cite
key "bleep,bleep how it works"

\end_inset

 jest komunikatorem zaprojektowanym przez firmę rozwijającą protokół BitTorrent.
 Do dyspozycji użytkowników oddano aplikację mobilną oraz aplikację desktopową
 (brak aplikacji webowej).
 Podobnie jak w
\begin_inset space ~
\end_inset

przypadku Messengera z
\begin_inset space ~
\end_inset

poprzedniego punktu, nie jest to oprogramowanie open-source.
 Bleep oferuje rozmowy dla dwóch osób, a
\begin_inset space ~
\end_inset

w
\begin_inset space ~
\end_inset

planach twórców jest zaimplementowanie komunikacji grupowej.
 Wiadomości są szyfrowane przed wysłaniem na urządzeniu nadawcy i
\begin_inset space ~
\end_inset

odszyfrowywane na urządzeniu odbiorcy — szyfrowanie end to end.
 
\end_layout

\begin_layout Standard
Jednak najważniejszą cechą wyróżniającą ten komunikator jest jego architektura
 — brak centralnego serwera pośredniczącego w
\begin_inset space ~
\end_inset

przekazywaniu wiadomości.
 Komunikaty przesyłane są bezpośrednio między urządzeniami, jeśli oba są
 dostępne w
\begin_inset space ~
\end_inset

momencie wysyłania.
 W
\begin_inset space ~
\end_inset

przeciwnym przypadku wiadomość umieszczana jest w
\begin_inset space ~
\end_inset

DHT (Distributed Hash Table) i
\begin_inset space ~
\end_inset

przechowywana do czasu odebrania jej.
 Specjalny mechanizm dba o
\begin_inset space ~
\end_inset

to, by wiadomość nie została usunięta z
\begin_inset space ~
\end_inset

DHT wcześniej.
 Dane o
\begin_inset space ~
\end_inset

koncie użytkownika oraz klucze szyfrujące pozostają lokalnie na urządzeniu.
 
\end_layout

\begin_layout Section
Signal 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:signal"

\end_inset


\end_layout

\begin_layout Standard
Twórcy aplikacji Signal 
\begin_inset CommandInset citation
LatexCommand cite
key "signal,signal artykuł,signal double ratchet"

\end_inset

 skupili się przede wszystkim na bezpieczeństwie i
\begin_inset space ~
\end_inset

prywatności użytkowników.
 Wiadomości są szyfrowane na urządzeniach, więc pomimo faktu, że architektura
 zakłada obecność centralnego serwera, wiadomości przechowywane na nim nie
 mogą zostać odczytane przez osoby trzecie.
 Jednakże, ten typ architektury posiada znaczącą wadę — jeśli serwer stanie
 się niedostępny (na przykład z
\begin_inset space ~
\end_inset

powodu jego awarii lub braku łączności z
\begin_inset space ~
\end_inset

nim — awarii łącza komunikacyjnego) to niemożliwe jest prowadzenie rozmów
 (dotyczy to każdej aplikacji z
\begin_inset space ~
\end_inset

centralnym serwerem).
 Kod źródłowy jest dostępny publicznie co oznacza, że każdy może sprawdzić
 zgodność implementacji z
\begin_inset space ~
\end_inset

oferowanymi założeniami oraz uczestniczyć w
\begin_inset space ~
\end_inset

rozwoju aplikacji.
 Podobnie jak w
\begin_inset space ~
\end_inset

przypadku aplikacji Bleep, dostępne są aplikacje mobilna i
\begin_inset space ~
\end_inset

desktopowa.
 Możliwe jest prowadzenie rozmowy grupowej pomimo zastosowania szyfrowania
 wiadomości — treść zostaje zaszyfrowana symetrycznie (jedna wersja dla
 wszystkich odbiorców niezależnie od ich liczby), a
\begin_inset space ~
\end_inset

następnie sam klucz jest szyfrowany zgodnie z
\begin_inset space ~
\end_inset

oczekiwaniami każdego z
\begin_inset space ~
\end_inset

odbiorców z
\begin_inset space ~
\end_inset

osobna.
 Dzięki temu mechanizmowi uniknięto sytuacji, w
\begin_inset space ~
\end_inset

której nadawca musiałby przygotować 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
n
\end_layout

\end_inset

 wersji całej, potencjalnie dużej wiadomości dla 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
n
\end_layout

\end_inset

 odbiorców.
\end_layout

\begin_layout Standard
Podobne rozwiązania: Wire 
\begin_inset CommandInset citation
LatexCommand cite
key "wire,wire privacy rep,wire security rep"

\end_inset

, Telegram 
\begin_inset CommandInset citation
LatexCommand cite
key "telegram,telegram protokół"

\end_inset

, Allo 
\begin_inset CommandInset citation
LatexCommand cite
key "allo"

\end_inset


\end_layout

\begin_layout Section
WhatsApp 
\end_layout

\begin_layout Standard
WhatsApp 
\begin_inset CommandInset citation
LatexCommand cite
key "whatsapp,whatsapp whitepaper"

\end_inset

 jest aplikacją podobną do wspomnianego w
\begin_inset space ~
\end_inset

poprzednim punkcie programu Signal, ale jej kod źródłowy nie jest dostępny
 publicznie.
 Inną, ważną cechą wyróżniającą WhatsApp jest oferowanie użytkownikom aplikacji
 webowej.
 Nie jest to jednak typowy, webowy klient sieci a
\begin_inset space ~
\end_inset

jedynie webowy interfejs do aplikacji zainstalowanej na telefonie.
 Wysłana w
\begin_inset space ~
\end_inset

kliencie webowym wiadomość najpierw zostaje przesłana bezpośrednio do aplikacji
 w
\begin_inset space ~
\end_inset

telefonie i
\begin_inset space ~
\end_inset

dopiero wówczas przekazana dalej do właściwych odbiorców.
 Oznacza to, że telefon staje się pośrednikiem w
\begin_inset space ~
\end_inset

wysyłaniu i
\begin_inset space ~
\end_inset

odbieraniu wiadomości pomiędzy klientem webowym i
\begin_inset space ~
\end_inset

resztą systemu.
 Identyczny mechanizm został zastosowany w przypadku aplikacji desktopowej.
\end_layout

\begin_layout Section
Darkwire 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Darkwire"

\end_inset


\end_layout

\begin_layout Standard
Darkwire 
\begin_inset CommandInset citation
LatexCommand cite
key "darkwire,darkwire git"

\end_inset

 to aplikacja open-source oferująca komunikator grupowy z
\begin_inset space ~
\end_inset

dostępem poprzez stronę internetową (aplikacja webowa).
 W
\begin_inset space ~
\end_inset

przeciwieństwie do większości rozwiązań użytkownik nie musi tworzyć konta
 by skorzystać z
\begin_inset space ~
\end_inset

programu.
 W
\begin_inset space ~
\end_inset

celu skomunikowania się z
\begin_inset space ~
\end_inset

użytkownikami należy wymienić między nimi identyfikator konwersacji (link
 do konkretnego pokoju) korzystając z
\begin_inset space ~
\end_inset

innego sposobu komunikacji (np.
 poprzez e-mail, SMS czy osobiście).
 Takie rozwiązanie zakłada, że identyfikator nie zostanie odgadnięty przez
 osoby trzecie — w
\begin_inset space ~
\end_inset

przeciwnym przypadku będą one mogły odczytać wysyłane wiadomości.
 Architektura zakłada istnienie centralnego serwera uczestniczącego w
\begin_inset space ~
\end_inset

przekazywaniu wiadomości.
 Z
\begin_inset space ~
\end_inset

racji faktu, że aplikacja ma otwarte źródła, każdy może uruchomić swój własny
 serwer.
 Komunikaty są szyfrowane na urządzeniu (w
\begin_inset space ~
\end_inset

przeglądarce) przed wysłaniem, zatem serwer nie zna treści wiadomości.
 Centralny serwer przesyła wiadomości tylko do tych uczestników, którzy
 są dostępni w
\begin_inset space ~
\end_inset

momencie nadania wiadomości (brak wsparcia dla odbierania starszych wiadomości
 czy wysyłania wiadomości do użytkowników niedostępnych w
\begin_inset space ~
\end_inset

danej chwili).
 
\end_layout

\begin_layout Section
Friends 
\end_layout

\begin_layout Standard
Ten niszowy projekt 
\begin_inset CommandInset citation
LatexCommand cite
key "friends"

\end_inset

 open-source oferuje aplikację desktopową i
\begin_inset space ~
\end_inset

umożliwia prowadzenie rozmów grupowych.
 Szyfrowanie wiadomości nie zostało do tej pory zrealizowane, ale jest jednym
 z
\begin_inset space ~
\end_inset

punktów przyszłego rozwoju.
 Głównym celem twórców było stworzenie programu niezależnego od centralnego
 serwera oraz umożliwiającego rozmowę przy użyciu alternatywnych kanałów
 komunikacyjnych (np.
 poprzez Bluetooth) w
\begin_inset space ~
\end_inset

sytuacji gdy połączenie internetowe jest niedostępne.
 Aplikacja wykorzystuje algorytm plotkowania (gossiping) oraz replikuje
 wiadomości przy użyciu drzewa skrótów (hash tree, Merkle DAG, DAG - Directed
 Acyclic Graph 
\begin_inset CommandInset citation
LatexCommand cite
key "merkle"

\end_inset

).
 Dzięki temu wiadomości w
\begin_inset space ~
\end_inset

konwersacji mogą zostać połączone nawet w
\begin_inset space ~
\end_inset

przypadku, gdy ktoś nadał komunikaty będąc odłączonym od sieci — mechanizm
 podobny do łączenia zmian w
\begin_inset space ~
\end_inset

repozytorium kodu.
 Wykorzystanie opisanych powyżej mechanizmów gwarantuje ostateczną spójność
 otrzymanych wiadomości — każdy uczestnik rozmowy ostatecznie będzie widział
 taki sam zbiór wiadomości — przykładowy scenariusz dla 3 użytkowników:
 
\end_layout

\begin_layout Enumerate
Wiadomość wysłana przez użytkownika
\begin_inset space ~
\end_inset

A została odebrana przez użytkownika B, który dołączył ją do swojego drzewa
 wiadomości.
 
\end_layout

\begin_layout Enumerate
Użytkownik
\begin_inset space ~
\end_inset

A stał się niedostępny.
 
\end_layout

\begin_layout Enumerate
Użytkownik
\begin_inset space ~
\end_inset

C stał się dostępny i
\begin_inset space ~
\end_inset

odebrał od użytkownika
\begin_inset space ~
\end_inset

B zmienioną wersję drzewa i
\begin_inset space ~
\end_inset

w
\begin_inset space ~
\end_inset

ten sposób dowiedział się o
\begin_inset space ~
\end_inset

wiadomości wysłanej przez użytkownika
\begin_inset space ~
\end_inset

A pomimo faktu, że ten jest w
\begin_inset space ~
\end_inset

tej chwili niedostępny.
 
\end_layout

\begin_layout Section
Tox 
\end_layout

\begin_layout Standard
Tox 
\begin_inset CommandInset citation
LatexCommand cite
key "tox,tox faq"

\end_inset

 jest z
\begin_inset space ~
\end_inset

założenia rozproszonym i
\begin_inset space ~
\end_inset

szyfrowanym protokołem do wymiany wiadomości.
 Powstało kilkanaście implementacji klientów obsługujących go, co pozwala
 na komunikowanie się z
\begin_inset space ~
\end_inset

użytkownikami różnych aplikacji.
 Wśród zaimplementowanych aplikacji są programy na komputery stacjonarne
 oraz smartfony.
 Wiadomości są przesyłane bezpośrednio między nadawcą i
\begin_inset space ~
\end_inset

odbiorcą dlatego obie strony muszą być dostępne jednocześnie.
 Brak wsparcia dostarczania wiadomości gdy jedna strona jest niedostępna
 to duża wada wszystkich aplikacji implementujących wskazany powyżej rodzaj
 transmisji P2P.
 Jednym z
\begin_inset space ~
\end_inset

rozwiązań tego problemu zaproponowanym przez twórców protokołu jest skorzystanie
 z
\begin_inset space ~
\end_inset

serwerów, którym użytkownik ufa i
\begin_inset space ~
\end_inset

których zadaniem jest przekazywanie wiadomości do odbiorcy pod nieobecność
 nadawcy.
 Narusza to jednak założenie o
\begin_inset space ~
\end_inset

rozproszeniu systemu (braku centralnych węzłów).
 Wsparcie dla komunikacji grupowej jest jednym z
\begin_inset space ~
\end_inset

celów rozwoju protokołu.
 
\end_layout

\begin_layout Section
ZeroChat, ZeroMail, BitMessage 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:zerochat"

\end_inset


\end_layout

\begin_layout Standard
Przytoczone aplikacje 
\begin_inset CommandInset citation
LatexCommand cite
key "zeronet"

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "bitmessage-main"

\end_inset

 realizują pomysły na komunikatory bazujące na mechanizmie podobnym do transakcj
i kryptowalutowych.
 Wysłanie wiadomości wymaga umieszczenia wiadomości w
\begin_inset space ~
\end_inset

bloku, obliczenia funkcji skrótu z
\begin_inset space ~
\end_inset

zadanym prefiksem (proof of work) i
\begin_inset space ~
\end_inset

umieszczenia bloku w
\begin_inset space ~
\end_inset

łańcuchu (blockchain).
 Samo tylko wyliczenie funkcji skrótu powinno z
\begin_inset space ~
\end_inset

definicji zająć około 4 minut 
\begin_inset CommandInset citation
LatexCommand cite
key "bitmessage-pdf"

\end_inset

, podczas gdy pozostałe komunikatory dążą do uzyskania czasu dostarczenia
 wiadomości bliskiego zeru (rozmowa w
\begin_inset space ~
\end_inset

czasie rzeczywistym).
 Mimo tej znaczącej wady należy potraktować te projekty jako próbę stworzenia
 rozwiązania o
\begin_inset space ~
\end_inset

innej architekturze niż dotychczas zaprezentowane (centralny serwer lub
 P2P).
 Przykładowymi zaletami architektury blockchain są: brak centralnego serwera
 lub centrów danych, nad którymi kontrolę ma jedna firma decydująca o
\begin_inset space ~
\end_inset

sposobie ich działania lub ich wyłączeniu, skalowalność oraz brak możliwości
 ingerencji w
\begin_inset space ~
\end_inset

zapisane dane — wraz z
\begin_inset space ~
\end_inset

upływem czasu maleje prawdopodobieństwo, że treść wiadomości zapisana w
\begin_inset space ~
\end_inset

blockchainie ulegnie zmianie (wynika to wprost z
\begin_inset space ~
\end_inset

własności tej technologii).
 Być może w
\begin_inset space ~
\end_inset

przyszłości wady uda się zminimalizować, a
\begin_inset space ~
\end_inset

zalety architektury blockchain okażą się kluczowe.
 
\end_layout

\begin_layout Section
Podsumowanie i porównanie aplikacji
\end_layout

\begin_layout Standard
W tabeli 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Porównanie-cech-komunikatorów"

\end_inset

 przedstawiono porównanie cech poszczególnych komunikatorów.
 Sformułowanie 
\begin_inset Quotes pld
\end_inset

docelowo
\begin_inset Quotes prd
\end_inset

 oznacza, że dana cecha jest w planach twórców aplikacji, ale obecnie jest
 niedostępna, a 
\begin_inset Quotes pld
\end_inset

częściowo
\begin_inset Quotes prd
\end_inset

 — wsparcie tylko przez niektóre aplikacje wykorzystujące dany protokół.
 Architektura 
\begin_inset Quotes pld
\end_inset

centralna
\begin_inset Quotes prd
\end_inset

 oznacza, że w danym systemie komunikatora istnieje serwer pośredniczący,
 przekazujący wiadomości pomiędzy użytkownikami (architektura klient-serwer).
 W przypadku architektury P2P wiadomości przekazywane są bezpośrednio pomiędzy
 urządzeniami użytkowników.
 Architektura blockchain została opisana w artykule 
\begin_inset CommandInset citation
LatexCommand cite
key "bitmessage-pdf"

\end_inset

.
 W wierszu 
\begin_inset Quotes pld
\end_inset

platforma
\begin_inset Quotes prd
\end_inset

 zastosowano następujące skróty: 
\begin_inset Quotes pld
\end_inset

PC
\begin_inset Quotes prd
\end_inset

 — aplikacja desktopowa, 
\begin_inset Quotes pld
\end_inset

web
\begin_inset Quotes prd
\end_inset

 — aplikacja webowa, 
\begin_inset Quotes pld
\end_inset

mob
\begin_inset Quotes prd
\end_inset

 — aplikacja mobilna.
 Gwiazdki oznaczają, że dany komunikator posiada niestandardowe rozwiązanie
 lub dana cecha jest spełniona z pewnym zastrzeżeniem.
 Przykładowo, skorzystanie z aplikacji desktopowej lub webowej komunikatora
 WhatsApp jest możliwe tylko, gdy uruchomiona jest aplikacja mobilna, a
 komunikator Darkwire oferuje szyfrowanie wiadomości z pewnym zastrzeżeniem,
 o którym mowa w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:darkwire-bezpieczenstwo"

\end_inset

.
\end_layout

\begin_layout Standard
Wśród wymienionych aplikacji brakuje takiej, która posiadałaby wszystkie
 pozytywne cechy oraz była pozbawiona wszystkich wad.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways true
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Porównanie cech komunikatorów
\begin_inset CommandInset label
LatexCommand label
name "tab:Porównanie-cech-komunikatorów"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="9">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="2.3cm">
<column alignment="center" valignment="top" width="2cm">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="2.3cm">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="2.3cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Messenger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bleep
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WhatsApp
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Darkwire
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Friends
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tox
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BitMessage
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
open source
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
architektura
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
centralna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
P2P
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
centralna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
centralna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
centralna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
P2P
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
P2P
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
blockchain
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
szyfrowanie wiadomości
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
docelowo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
platforma
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PC, web, mob
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PC, mob
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PC, mob
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PC*, web*, mob
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
web
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wiadomości grupowe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
docelowo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
docelowo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
połączenia głosowe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
połączenia wideo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wysyłanie plików (zdjęcia, wideo, inne)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
częściowo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dostarczanie pod nieobecność nadawcy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak (DHT)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
konieczność posiadania konta
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak (klucz publiczny)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak (klucz publiczny)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
lista kontaktów (znajomych)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tak
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Koncepcja
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap:Koncepcja"

\end_inset


\end_layout

\begin_layout Standard
W niniejszym rozdziale opisano technologie i
\begin_inset space ~
\end_inset

protokoły wykorzystane do opracowania koncepcji i
\begin_inset space ~
\end_inset

implementacji rozproszonego komunikatora grupowego.
 Na początku (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Idea"

\end_inset

) znajduje się opis idei komunikatora — sprecyzowano, czym jest komunikator
 oraz jakie powinien spełniać wymagania i założenia.
 Następnie, w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Model"

\end_inset

, przedstawiono model systemu.
 W rozdziale scharakteryzowano również najważniejsze cechy protokołu BitTorrent
 (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:bittorent"

\end_inset

) oraz opisano jego implementację w
\begin_inset space ~
\end_inset

języku JavaScript — bibliotekę WebTorrent — punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:webtorrent"

\end_inset

.
 Wspomniano także, jaką rolę w systemie pełni wyżej wymieniony protokół
 oraz jakie istotne zmiany względem specyfikacji protokołu wprowadzono w
 bibliotece.
 
\end_layout

\begin_layout Section
Idea
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Idea"

\end_inset


\end_layout

\begin_layout Standard
Głównym zadaniem komunikatora internetowego (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
instant messenger
\end_layout

\end_inset

) 
\begin_inset CommandInset citation
LatexCommand cite
key "IM 1,IM 2,IM 3"

\end_inset

 jest umożliwienie użytkownikom wysyłania wiadomości do innych użytkowników,
 którzy również korzystają z tego samego komunikatora (inaczej: usługi,
 systemu, programu).
 Osoby rozmawiające ze sobą za pośrednictwem komunikatora są zwykle znajomymi,
 choć nie jest to regułą.
 W celu korzystania z danego systemu użytkownik często musi dokonać rejestracji
 — zakłada konto (profil), które będzie go jednoznacznie identyfikowało
 w danym systemie.
 Istnieją również komunikatory, które nie nakładają na użytkownika takiego
 obowiązku.
 Komunikator zwykle dostępny jest na różnych platformach — jako program
 desktopowy, aplikacja mobilna lub webowa.
 Dzięki temu, w odróżnieniu od wiadomości SMS, użytkownicy mogą komunikować
 się korzystając z różnych urządzeń — przykładowo wiadomość wysłana za pośrednic
twem aplikacji mobilnej może zostać odczytana przez odbiorcę na komputerze
 stacjonarnym.
 
\end_layout

\begin_layout Standard
W poniższych punktach opisano własności, które powinien posiadać komunikator.
\end_layout

\begin_layout Subsection
Konto użytkownika
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:konto uzytkownika"

\end_inset


\end_layout

\begin_layout Standard
Należy zagwarantować unikalność każdego użytkownika w skali całego systemu.
 Musi istnieć możliwość jednoznacznego zidentyfikowania osoby.
 W tym celu można przyjąć założenie, że unikalnym identyfikatorem użytkownika
 jest jego numer telefonu lub adres email, który należy podać podczas rejestracj
i konta.
 Zakłada się istnienie centralnego zarządcy nadzorującego proces rejestracji
 kont i uniemożliwiającego założenie więcej niż jednego konta dla danego
 identyfikatora.
 
\end_layout

\begin_layout Subsection
Treść wiadomości
\end_layout

\begin_layout Standard
Użytkownik ma możliwość podania treści wiadomości w postaci ciągu znaków.
 Jest to podstawowy sposób definiowania komunikatu.
 Rozszerzeniem byłoby przesyłanie w treści wiadomości plików — zdjęć, filmów,
 plików audio bądź dowolnego innego typu.
 W trakcie prac nad projektem podjęto próbę zaimplementowania przesyłania
 plików.
 Ta funkcjonalność nie znalazła się jednak w
\begin_inset space ~
\end_inset

końcowej wersji systemu z powodu ograniczeń technologicznych.
 Nie jest to jednak niezbędna opcja — możliwe było przeprowadzenie testów
 aplikacji omówionych w rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Wyniki testów"

\end_inset

.
\end_layout

\begin_layout Subsection
Zdefiniowanie odbiorcy lub odbiorców
\end_layout

\begin_layout Standard
Użytkownik ma możliwość zaadresowania wiadomości do konkretnego odbiorcy
 — musi mieć gwarancję, że wiadomość będzie mogła zostać odczytana tylko
 przez zdefiniowanego adresata i nikogo poza nim.
 Jeśli w jednej rozmowie uczestniczy więcej niż 2 uczestników to taki komunikato
r określa się mianem komunikatora grupowego, a gwarancja możliwości odczytania
 wiadomości rozszerza się na wszystkich uczestników rozmowy i nikogo poza
 nimi.
 Ponadto, użytkownik powinien mieć pewność, że odbiorca jest tym, za kogo
 się podaje — brak możliwości podszycia się pod odbiorcę.
\end_layout

\begin_layout Standard
Jeśli system komunikatora nakłada na użytkowników obowiązek posiadania konta
 to zazwyczaj istnieje również możliwość definiowania relacji znajomości
 pomiędzy kontami — użytkownik jest 
\begin_inset Quotes pld
\end_inset

znajomym
\begin_inset Quotes prd
\end_inset

 innego użytkownika.
 Operacja zawarcia znajomości jest jednokrotna — zakłada się, że raz zawarta
 znajomość trwa aż do momentu jej anulowania i dopiero wówczas może zostać
 zawarta ponownie.
 Dodatkowo przyjmuje się, że użytkownicy rzadko wykonują operację anulowania
 znajomości — przykładowo, nie dochodzi do sytuacji, w której użytkownik
 anuluje znajomość każdorazowo po wysłaniu wiadomości.
 Przy spełnieniu powyższych założeń, nadawca wiadomości wybiera odbiorcę
 lub odbiorców z listy swoich znajomych.
 Jednocześnie, nadawca ma gwarancję, że ponowne wybranie tego samego znajomego
 jako odbiorcy spowoduje dostarczenie wiadomości do tej samej osoby.
\end_layout

\begin_layout Standard
W opisanym powyżej systemie konieczne jest zdefiniowanie operacji wyszukiwania
 kont użytkowników w celu zawarcia znajomości.
 W punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:konto uzytkownika"

\end_inset

 przyjęto założenie, że każde konto posiada unikalny identyfikator, zatem
 możliwe staje się znalezienie konkretnego użytkownika.
 Podobny mechanizm można zastosować jeśli system nie umożliwia zawierania
 znajomości — w tej sytuacji nadawca wybiera konto odbiorcy z listy wszystkich
 kont dostępnych w systemie.
 
\end_layout

\begin_layout Standard
Inne podejście definiowania odbiorców można zastosować w systemie pozbawionym
 kont użytkowników.
 Nadawca najpierw tworzy lub uzyskuje unikalny identyfikator rozmowy (np.
 link prowadzący do konwersacji), a następnie musi przekazać go odbiorcom
 korzystając z innego sposobu komunikacji — przykład opisany w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Darkwire"

\end_inset

.
\end_layout

\begin_layout Standard
Ostatecznie zdecydowano, że w systemie komunikatora będącego przedmiotem
 niniejszej pracy każdy użytkownik będzie posiadał unikalne konto, ale nie
 wprowadzono relacji znajomości.
 Ponadto, nadawca uzyskuje identyfikator konwersacji i definiuje odbiorców
 wiadomości w sposób opisany w poprzednim akapicie.
 Jest to rozwiązanie prostsze implementacyjnie.
 Dodatkowo, celem pracy jest minimalizowanie roli serwera pośredniczącego,
 a operacje zawierania znajomości i wyszukiwania kont użytkowników spowodowałyby
 jego dodatkowe obciążenie.
 Nie są to operacje istotne z punktu widzenia testów z rozdziału 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Wyniki testów"

\end_inset

, zatem można było z nich zrezygnować.
\end_layout

\begin_layout Subsection
Dostarczenie wiadomości do wszystkich odbiorców
\end_layout

\begin_layout Standard
Istnieje gwarancja dostarczenia wiadomości do wszystkich odbiorców w ramach
 pojedynczej konwersacji.
 Nie może zaistnieć sytuacja, w której część uczestników rozmowy nie otrzyma
 nadanej wiadomości.
\end_layout

\begin_layout Subsection
Odebranie wiadomości
\end_layout

\begin_layout Standard
Użytkownik ma gwarancję odebrania wszystkich wiadomości, których jest adresatem.
 Dostępność odbiorcy oznacza, że program komunikatora na jego urządzeniu
 jest włączony i znajduje się w stanie gotowości do odbioru komunikatów.
 Jeśli odbiorca jest dostępny w momencie nadania wiadomości, to zostaje
 ona dostarczona do niego jak najszybciej (więcej o szybkości transmisji
 w kolejnym punkcie).
 Jeśli odbiorca nie jest dostępny w tym momencie, to wiadomość zostaje dostarczo
na do niego w późniejszym czasie — kiedy będzie ponownie dostępny (w momencie
 ponownego uruchomienia komunikatora na urządzeniu).
\end_layout

\begin_layout Subsection
Czas przesyłania wiadomości
\end_layout

\begin_layout Standard
Komunikator (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
instant messenger
\end_layout

\end_inset

) z definicji powinien umożliwiać przesłanie wiadomości od nadawcy do odbiorcy
 w jak najkrótszym czasie (niemalże natychmiast).
 System powinien cechować się zatem wysoką wydajnością.
 Ostateczna efektywność zastosowanego rozwiązania zostanie zbadana w ramach
 testów wydajnościowych.
 Ich przebieg i wyniki przedstawiono w rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Wyniki testów"

\end_inset

.
\end_layout

\begin_layout Subsection
Dostarczanie wiadomości pod nieobecność nadawcy
\end_layout

\begin_layout Standard
Kolejnym założeniem, które musi spełniać system komunikatora jest możliwość
 dostarczenia wiadomości do odbiorcy w momencie, gdy jej nadawca nie jest
 dostępny.
 W przeciwnym przypadku (czyli w sytuacji, w której wiadomość może zostać
 dostarczona tylko gdy nadawca i odbiorca są jednocześnie dostępni) możliwe
 byłoby naruszenie warunku żywotności (postępu) dla konwersacji.
 Oznaczałoby to, że nadana wiadomość mogłaby nigdy nie dotrzeć do odbiorcy
 (nawet, jeśli okresowo nadawca i odbiorca stawaliby się dostępni).
 Rozwiązanie tego problemu dla systemu komunikatora projektowanego w ramach
 niniejszej pracy zostało zaproponowane w punktach 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Odebranie_wiadomości"

\end_inset

 i 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:dostarczanie wiadomości offline propozycja"

\end_inset

.
\end_layout

\begin_layout Subsection
Liczba użytkowników systemu
\end_layout

\begin_layout Standard
Docelowo system komunikatora powinien umożliwiać prowadzenie rozmów nieograniczo
nej liczbie użytkowników.
 Każda osoba powinna mieć możliwość skomunikowania się z dowolną inną osobą
 na świecie.
 Zaprojektowanie takiego społecznościowego systemu dużej skali jest ogromnym
 wyzwaniem inżynieryjnym.
 Według źródeł, z aplikacji Facebook Messenger korzysta miesięcznie 1,2
 miliarda użytkowników 
\begin_inset CommandInset citation
LatexCommand cite
key "messenger uzytkownicy"

\end_inset

.
 Dla porównania, liczba użytkowników email wynosi około 3,7 miliarda 
\begin_inset CommandInset citation
LatexCommand cite
key "email-liczba"

\end_inset

.
 
\end_layout

\begin_layout Section
Model
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Model"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\begin_layout Itemize
mamy węzły, które mają równe role i komunikują się ze sobą w jakim celu?
\end_layout

\begin_layout Itemize
co za mnie robi BT (np przy dołączaniu do swarma żeby pobrać wiadomość)
 — ZBIÓR SĄSIADÓW z doka
\end_layout

\begin_layout Itemize
architektury używane i jaką wybrałem; jak w każdej z architektur zachodzi
 przesył komunikatu
\end_layout

\begin_layout Itemize
dlaczego apka webowa skoro są inne
\end_layout

\end_inset


\end_layout

\begin_layout Standard
a
\end_layout

\begin_layout Section
BitTorrent 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:bittorent"

\end_inset


\end_layout

\begin_layout Standard
BitTorrent 
\begin_inset CommandInset citation
LatexCommand cite
key "bittorrent"

\end_inset

 to protokół komunikacyjny pozwalający na wymianę i
\begin_inset space ~
\end_inset

dystrybucję plików przez Internet.
 Jego główną zaletą jest podział plików na części i
\begin_inset space ~
\end_inset

możliwość pobierania tych części od użytkowników, którzy w
\begin_inset space ~
\end_inset

danym momencie również uczestniczą w
\begin_inset space ~
\end_inset

procesie udostępniania.
 Pozwala to na znaczne odciążenie maszyny, która rozpoczęła udostępnianie
 (np.
 serwera).
 W
\begin_inset space ~
\end_inset

szczególności możliwe jest nawet wyłączenie serwera, a
\begin_inset space ~
\end_inset

plik pozostanie dostępny do pobrania, jeśli tylko wszystkie jego fragmenty
 zostały przed wyłączeniem rozesłane do zainteresowanych komputerów — wystarczy,
 że jedna maszyna posiada daną część i
\begin_inset space ~
\end_inset

podzieli się nią z
\begin_inset space ~
\end_inset

pozostałymi.
 
\end_layout

\begin_layout Subsection
Podstawowe pojęcia
\end_layout

\begin_layout Standard
Poniżej znajduje się lista najważniejszych pojęć związanych z
\begin_inset space ~
\end_inset

protokołem wraz z
\begin_inset space ~
\end_inset

krótkim wyjaśnieniem ich znaczenia:
\end_layout

\begin_layout Itemize
torrent — plik lub zbiór plików udostępnionych do pobrania.
\end_layout

\begin_layout Itemize
metaplik .torrent (.torrent metafile) — dodatkowy plik z
\begin_inset space ~
\end_inset

metadanymi dotyczącymi udostępnionych plików.
 Zawiera między innymi:
\end_layout

\begin_deeper
\begin_layout Itemize
nazwy i
\begin_inset space ~
\end_inset

rozmiary plików, 
\end_layout

\begin_layout Itemize
liczbę i
\begin_inset space ~
\end_inset

rozmiar fragmentów, na jakie zostały podzielone pliki, 
\end_layout

\begin_layout Itemize
listę skrótów SHA-1 fragmentów w
\begin_inset space ~
\end_inset

celu weryfikacji poprawności,
\end_layout

\begin_layout Itemize
adresy URL trackerów.
\end_layout

\end_deeper
\begin_layout Itemize
piece, block — podczas przygotowywania torrenta pliki dzielone są na fragmenty
 (piece), a
\begin_inset space ~
\end_inset

każdy taki fragment składa się z
\begin_inset space ~
\end_inset

bloków (block).
 Blok jest najmniejszą jednostką, którą można przesłać przez sieć między
 użytkownikami.
 Aby udostępniać fragment użytkownik musi posiadać wszystkie jego bloki.
 
\end_layout

\begin_layout Itemize
info hash — pozwala jednoznacznie zidentyfikować dany torrent.
 Jest to wynik funkcji skrótu SHA-1, której podawana jest jako argument
 część metapliku .torrent (nazwy plików i
\begin_inset space ~
\end_inset

lista skrótów fragmentów)
\end_layout

\begin_layout Itemize
tracker — serwer, którego zadaniem jest przechowywanie adresów IP użytkowników
 pobierających dany torrent.
 Pozwala użytkownikom na znalezienie siebie nawzajem.
 
\end_layout

\begin_layout Itemize
klient (client) — program uruchomiony na komputerze użytkownika, który pozwala
 na pobieranie plików z
\begin_inset space ~
\end_inset

wykorzystaniem protokołu BitTorrent.
\end_layout

\begin_layout Itemize
peer — węzeł (komputer, klient) pobierający i
\begin_inset space ~
\end_inset

wysyłający fragmenty torrenta.
 Zazwyczaj nie posiada jeszcze wszystkich fragmentów.
\end_layout

\begin_layout Itemize
seed — peer posiadający wszystkie fragmenty.
 
\end_layout

\begin_layout Itemize
swarm — grupa peerów pobierających dany torrent.
\end_layout

\begin_layout Itemize
peer-to-peer (P2P) — sieć złożona z
\begin_inset space ~
\end_inset

komputerów, które komunikują się ze sobą np.
 w
\begin_inset space ~
\end_inset

celu wymiany plików.
 Peery tworzą sieć P2P.
\end_layout

\begin_layout Itemize
Distributed Hash Table (DHT) — rozproszona tablica mieszająca — sieć składająca
 się z
\begin_inset space ~
\end_inset

węzłów, które umożliwiają zapisywanie i
\begin_inset space ~
\end_inset

odczytywanie rekordów w
\begin_inset space ~
\end_inset

formie klucz-wartość.
 Węzły dzielą między sobą zbiór wszystkich kluczy.
 W
\begin_inset space ~
\end_inset

kontekście protokołu BitTorrent, DHT może zastąpić rolę trackera.
\end_layout

\begin_layout Itemize
magnet link 
\begin_inset CommandInset citation
LatexCommand cite
key "magnet link,magnet uri scheme"

\end_inset

 — link pozwalający na uzyskanie metadanych torrenta bez konieczności pobierania
 metapliku .torrent.
 Link powinien zawierać przynajmniej info hash torrenta oraz listę trackerów.
 W ogólności magnet link umożliwia identyfikację plików na podstawie ich
 zawartości (bazując na wyniku funkcji skrótu tejże zawartości), a nie ich
 lokalizacji, jak ma to miejsce w przypadku zwykłych linków (odnoszących
 się do pliku znajdującego się w konkretnym katalogu na konkretnej maszynie).
 Oprócz wspomnianych już parametrów (wynik funkcji skrótu, lista trackerów),
 magnet link może zawierać szereg innych atrybutów.
 Przykładowo są to: nazwa i rozmiar pliku, słowa kluczowe umożliwiające
 bardziej szczegółowe opisanie zawartości pliku czy zapasowy, standardowy
 link pozwalający pobrać plik ze zwykłego serwera w przypadku, gdy pobranie
 go z sieci P2P okaże się niemożliwe.
 
\end_layout

\begin_layout Subsection
Scenariusz pobrania torrenta
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:Scenariusz pobrania torrenta"

\end_inset


\end_layout

\begin_layout Standard
W celu pobrania torrenta niezbędne są następujące czynności:
\end_layout

\begin_layout Enumerate
Pobranie metapliku .torrent lub poznanie (kliknięcie) magnet linku identyfikujące
go dany torrent.
 Zazwyczaj informacje te można uzyskać na stronach internetowych katalogujących
 istniejące torrenty (wyszukiwarkach torrentów).
\end_layout

\begin_layout Enumerate
Uzyskanie listy trackerów z
\begin_inset space ~
\end_inset

metapliku lub magnet linka.
\end_layout

\begin_layout Enumerate
Pobranie z
\begin_inset space ~
\end_inset

trackera listy peerów uczestniczących w
\begin_inset space ~
\end_inset

udostępnianiu torrenta.
\end_layout

\begin_layout Enumerate
Pobranie fragmentów torrenta od peerów.
\end_layout

\begin_layout Subsection
Scenariusz utworzenia torrenta
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:Scenariusz utworzenia torrenta"

\end_inset


\end_layout

\begin_layout Standard
W celu udostępnienia torrenta należy:
\end_layout

\begin_layout Enumerate
Stworzyć metaplik .torrent dla udostępnianych treści oraz utworzyć listę
 trackerów, które będą nadzorowały pobieranie treści.
\end_layout

\begin_layout Enumerate
Rozpocząć udostępnianie torrenta.
\end_layout

\begin_layout Enumerate
Umieścić metaplik .torrent w
\begin_inset space ~
\end_inset

miejscu, z
\begin_inset space ~
\end_inset

którego zainteresowani będą mogli go pobrać (np.
 na zewnętrznym serwerze).
 Alternatywnie można rozpowszechnić magnet link lub sam info hash — w
\begin_inset space ~
\end_inset

ostatniej sytuacji osoba zainteresowana pobraniem torrenta musi znać listę
 trackerów, które koordynują pobieranie.
 
\end_layout

\begin_layout Subsection
Jak komunikują się peery
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:jak-komunikuja"

\end_inset


\end_layout

\begin_layout Standard
BitTorrent używa 12 typów wiadomości do prowadzenia komunikacji pomiędzy
 peerami:
\end_layout

\begin_layout Itemize
hand-shake — wiadomość rozpoczynająca połączenie,
\end_layout

\begin_layout Itemize
bitfield — wskazuje, jakie fragmenty posiada peer, 
\end_layout

\begin_layout Itemize
keep-alive — wiadomość podtrzymująca otwarte połączenie, 
\end_layout

\begin_layout Itemize
port — informuje o
\begin_inset space ~
\end_inset

zmianie portu, 
\end_layout

\begin_layout Itemize
choke, unchoke, interested, not interested — 4 wiadomości informujące o
\begin_inset space ~
\end_inset

zmianie stanu peera (związane z
\begin_inset space ~
\end_inset

algorytmem z
\begin_inset space ~
\end_inset

punktu 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:choking-alg"

\end_inset

), 
\end_layout

\begin_layout Itemize
have — wiadomość informująca o
\begin_inset space ~
\end_inset

tym, że peer otrzymał nowy fragment, 
\end_layout

\begin_layout Itemize
request — żądanie fragmentu, 
\end_layout

\begin_layout Itemize
piece — wiadomość zawierająca fragment torrenta, 
\end_layout

\begin_layout Itemize
cancel — wiadomość anulująca żądanie fragmentu.
 
\end_layout

\begin_layout Subsection
Choking algorithm 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:choking-alg"

\end_inset


\end_layout

\begin_layout Standard
W idealnej sytuacji wymiana plików za pośrednictwem protokołu BitTorrent
 jest sprawiedliwa, to znaczy każdy peer może pobierać pliki, ale jednocześnie
 powinien udostępniać posiadane fragmenty innym.
 By zapobiec sytuacji, w
\begin_inset space ~
\end_inset

której peer blokuje wysyłanie posiadanych fragmentów, wprowadzono algorytm
 
\begin_inset Quotes pld
\end_inset

choking algorithm
\begin_inset Quotes prd
\end_inset

.
 Wykorzystuje on 4 typy wiadomości spośród wspomnianych w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:jak-komunikuja"

\end_inset

.
 i
\begin_inset space ~
\end_inset

polega na tym, że dany klient pozwala (unchoke) na pobieranie fragmentów
 od siebie tylko tym peerom, które posiadają i
\begin_inset space ~
\end_inset

udostępnią klientowi swoje fragmenty.
 Pobieranie wymaga zatem kooperacji i
\begin_inset space ~
\end_inset

wymiany interesujących, brakujących fragmentów.
 Bez tej wymiany połączenie zostaje przerwane (choke).
 Peer okresowo próbuje nawiązać współpracę z
\begin_inset space ~
\end_inset

nowymi peerami.
 
\end_layout

\begin_layout Subsection
Serwery potrzebne do działania protokołu
\end_layout

\begin_layout Standard
Protokół z
\begin_inset space ~
\end_inset

założenia powinien być w
\begin_inset space ~
\end_inset

pełni rozproszony i
\begin_inset space ~
\end_inset

nie polegać na żadnych publicznych serwerach — jedynie na bezpośredniej
 komunikacji użytkowników końcowych (P2P).
 Niestety kilka usług serwerowych jest wciąż aktywnie wykorzystywanych do
 prawidłowego działania sieci:
\end_layout

\begin_layout Itemize
Serwer przechowujący metapliki .torrent lub magnet linki, pozwalający na
 wyszukiwanie interesujących plików po nazwie, tagach, innych właściwościach
 oraz oferujący na przykład statystyki torrenta czy komentarze.
 Może zostać zastąpiony wyszukiwarką torrentów wbudowaną w
\begin_inset space ~
\end_inset

klienta, który wysyła zapytanie do podłączonych peerów, a
\begin_inset space ~
\end_inset

one przekazują je dalej, aż do momentu otrzymania odpowiedzi.
 Przykładowym protokołem umożliwiającym wyszukiwanie zawartości w
\begin_inset space ~
\end_inset

sieciach P2P jest Kademlia.
 Protokół ten wykorzystuje rozproszoną tablicę mieszającą (DHT) — nie wymaga
 centralnego serwera.
 
\end_layout

\begin_layout Itemize
Tracker.
 Istnieją jednak rozwiązania umożliwiające śledzenie swarmu bez użycia zewnętrzn
ego serwera np.
 DHT, PEX (Peer Exchange).
\end_layout

\begin_layout Itemize
Serwery pośredniczące w
\begin_inset space ~
\end_inset

nawiązaniu połączenia dwóch klientów ukrytych w
\begin_inset space ~
\end_inset

prywatnych sieciach IP (wykorzystujących translację adresów sieciowych).
 
\end_layout

\begin_layout Subsection
Zalety i
\begin_inset space ~
\end_inset

wady protokołu
\end_layout

\begin_layout Standard
Wśród zalet protokołu znajduje się przede wszystkim wspomniane na początku
 zmniejszone obciążenie serwera.
 Prędkość pobierania może osiągnąć wyższą wartość niż limit transferu wychodzące
go z
\begin_inset space ~
\end_inset

serwera — ograniczeniem jest jedynie dostępność pliku wśród peerów oraz
 limit transferu przychodzącego do danego klienta.
 Rozesłanie pliku o
\begin_inset space ~
\end_inset

rozmiarze 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
m
\end_layout

\end_inset

 do 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
n
\end_layout

\end_inset

 odbiorców bez użycia protokołu wymagałoby transferu danych o
\begin_inset space ~
\end_inset

rozmiarze 
\begin_inset Formula $m\cdotp n$
\end_inset

 z
\begin_inset space ~
\end_inset

węzła udostępniającego, natomiast z
\begin_inset space ~
\end_inset

użyciem protokołu ilość danych wysłanych przez nadawcę mieści się w
\begin_inset space ~
\end_inset

przedziale 
\begin_inset Formula $\left\langle m;m\cdotp n\right\rangle $
\end_inset

.
 Kolejną zaletą jest możliwość pobierania pliku nawet, jeśli oryginalny
 nadawca (twórca torrenta) jest niedostępny (zakładając oczywiście, że w
\begin_inset space ~
\end_inset

swarmie rozesłane zostały najpierw wszystkie fragmenty pliku) — cecha ta
 okaże się przydatna podczas implementacji komunikatora grupowego.
 
\end_layout

\begin_layout Standard
Do wad protokołu należy zaliczyć zwiększone obciążenie oraz narzut komunikacyjny
 po stronie klienta — konieczność koordynacji pobierania i
\begin_inset space ~
\end_inset

udostępniania, wysyłanie i
\begin_inset space ~
\end_inset

odbieranie wiadomości kontrolnych.
 Wadą może być sam fakt, że klient zobowiązany jest do udostępniania pobieranego
 pliku.
 Jedną z
\begin_inset space ~
\end_inset

ważniejszych kwestii, o
\begin_inset space ~
\end_inset

jakie należy zadbać jest również dostępność pliku — klient nie pobierze
 całego torrenta jeśli nie znajdzie w
\begin_inset space ~
\end_inset

sieci wszystkich jego fragmentów (tak zwany 
\begin_inset Quotes pld
\end_inset

problem ostatniego fragmentu
\begin_inset Quotes prd
\end_inset

).
 Dodatkowo, problematyczne może być wyszukanie metapliku .torrent lub magnet
 linku odpowiadającego danemu torrentowi.
 
\end_layout

\begin_layout Section
WebTorrent 
\begin_inset CommandInset citation
LatexCommand cite
key "webtorrent"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:webtorrent"

\end_inset


\end_layout

\begin_layout Standard
WebTorrent to biblioteka napisana w
\begin_inset space ~
\end_inset

języku JavaScript, implementująca protokół BitTorrent.
 Dzięki zastosowaniu tego języka możliwe jest użycie protokołu w
\begin_inset space ~
\end_inset

skrypcie wykonywanym w
\begin_inset space ~
\end_inset

przeglądarce po wejściu na stronę internetową.
 Bibliotekę można również wykorzystać jako moduł w
\begin_inset space ~
\end_inset

programie dla platformy Node.js.
 Funkcjonalność oferowana w
\begin_inset space ~
\end_inset

obu przypadkach jest niemal identyczna (poza kilkoma wyjątkami wynikającymi
 z
\begin_inset space ~
\end_inset

ograniczeń danej platformy).
 
\end_layout

\begin_layout Standard
Główną różnicą pomiędzy wersjami biblioteki WebTorrent i
\begin_inset space ~
\end_inset

protokołem BitTorrent jest wykorzystany protokół komunikacyjny.
 BitTorrent do komunikacji pomiędzy klientami wykorzystuje połączeniowy
 protokół TCP lub bezpołączeniowy µTP (Micro Transport Protocol), który
 bazuje na UDP.
 W
\begin_inset space ~
\end_inset

przypadku biblioteki WebTorrent, klient serwerowy (Node.js) również wykorzystuje
 wspomniane protokoły, ale klient webowy już nie — w
\begin_inset space ~
\end_inset

tym przypadku do komunikacji pomiędzy przeglądarkami użyto protokołu WebRTC.
 
\end_layout

\begin_layout Standard
WebRTC (Web Real-Time Communication) 
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc"

\end_inset

 jest zbiorem protokołów komunikacyjnych i
\begin_inset space ~
\end_inset

interfejsów programistycznych (API), pozwalającym na komunikację w
\begin_inset space ~
\end_inset

czasie rzeczywistym pomiędzy przeglądarkami dzięki wykorzystaniu połączeń
 P2P.
 WebRTC wymaga serwera pośredniczącego (signalling server) do nawiązania
 połączenia między przeglądarkami.
 Po poprawnym rozpoczęciu połączenia dane przesyłane są już bezpośrednio
 między użytkownikami.
 W
\begin_inset space ~
\end_inset

przypadku biblioteki WebTorrent rolę signalling server pełnią trackery.
\end_layout

\begin_layout Standard
Komputery użytkowników rzadko posiadają publiczne adresy IP — zazwyczaj
 router stosujący translację adresów (NAT — Network Address Translation)
 przydziela im prywatny adres IP w
\begin_inset space ~
\end_inset

danej podsieci.
 Często też użytkownicy korzystają z
\begin_inset space ~
\end_inset

zapory sieciowej (firewall), co dodatkowo utrudnia nawiązanie bezpośredniego
 połączenia.
 W
\begin_inset space ~
\end_inset

tych sytuacjach konieczne jest użycie techniki ICE (Interactive Connectivity
 Establishment).
 Polega ona na znalezieniu optymalnego sposobu nawiązania połączenia — w
\begin_inset space ~
\end_inset

pierwszej kolejności używając wprost adresów IP danych maszyn.
 W
\begin_inset space ~
\end_inset

przypadku niepowodzenia wykorzystywane są serwery STUN (Session Traversal
 Utilities for NAT) do przekazania faktycznego (publicznego) adresu IP danego
 komputera.
 Gdy i
\begin_inset space ~
\end_inset

ta metoda zawiedzie, możliwe jest użycie serwera TURN (Traversal Using Relays
 around NAT), który funkcjonuje jako pośrednik pomiędzy komputerami.
 Ostatniej metody nie można jednak nazwać komunikacją P2P.
 
\end_layout

\begin_layout Chapter
Architektura
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\begin_layout Itemize
własności, co oferuje (czy to nie jest już w koncepcji po poprawkach?)
\end_layout

\begin_layout Itemize
poniższy rysunek mniejszy i jak go tu wykorzystać?
\end_layout

\begin_layout Plain Layout
ze wstępu: Zbiór wszystkich użytkowników korzystających z
\begin_inset space ~
\end_inset

danego komunikatora tworzy graf — za wierzchołki można uznać włączone aplikacje,
 a
\begin_inset space ~
\end_inset

krawędziami są wysyłane i
\begin_inset space ~
\end_inset

odbierane komunikaty.
 Przyjęcie takiej perspektywy pozwala na rozpatrzenie problemu dystrybucji
 wiadomości jako tytułowe rozgłaszanie danych w
\begin_inset space ~
\end_inset

grafach dużej, wręcz globalnej, skali.
 
\end_layout

\begin_layout Plain Layout
W
\begin_inset space ~
\end_inset

rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:istniejace rozwiazania"

\end_inset

 przedstawiono 
\begin_inset Note Note
status open

\begin_layout Plain Layout
kilka [[co motywowało wybór tych kilku konkretnych]]
\end_layout

\end_inset

 istniejących komunikatorów.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO zmienić bo zbyt duży skrót myślowy (wśród komunikatorów?): Wśród nich
 można wyróżnić
\end_layout

\end_inset

 dwie główne architektury — rozproszoną (komunikacja bezpośrednia P2P
\begin_inset Foot
status open

\begin_layout Plain Layout
peer to peer
\end_layout

\end_inset

) oraz scentralizowaną (z serwerem pośredniczącym).
 
\end_layout

\begin_layout Plain Layout
Architektury te, w
\begin_inset space ~
\end_inset

formie wspomnianego grafu, zostały zaprezentowane na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Architektura-rozproszona-(po"

\end_inset

.
 Strzałki tego samego typu symbolizują rozmowy pomiędzy konkretnymi użytkownikam
i lub konwersacje grupowe.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/rozproszone i centralne rozglaszanie.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Architektura rozproszona (po lewej) i
\begin_inset space ~
\end_inset

scentralizowana (po prawej)
\begin_inset CommandInset label
LatexCommand label
name "fig:Architektura-rozproszona-(po"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap:Architektura"

\end_inset


\end_layout

\begin_layout Standard
System komunikatora grupowego będący przedmiotem niniejszej pracy magisterskiej
 wykorzystuje częściowo architekturę klient-serwer, jednakże rola serwera
 została maksymalnie ograniczona, a
\begin_inset space ~
\end_inset

częściowo architekturę rozproszoną peer-to-peer (przy użyciu protokołu BitTorren
t).
 W
\begin_inset space ~
\end_inset

pierwszym typie architektury można wyróżnić 3 warstwy logiczne (3-layer
 architecture) — klienty, serwer oraz baza danych.
 Rysunek 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Architektura-komunikatora"

\end_inset

 przedstawia opisywaną architekturę.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/architektura.png
	width 70line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Architektura komunikatora 
\begin_inset CommandInset label
LatexCommand label
name "fig:Architektura-komunikatora"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Klient jest aplikacją webową typu Single Page Application.
 Oznacza to, że cały kod źródłowy oraz niezbędne widoki pobierane są z
\begin_inset space ~
\end_inset

serwera (
\begin_inset Quotes pld
\end_inset

Serwer aplikacji
\begin_inset Quotes prd
\end_inset

 na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Architektura-komunikatora"

\end_inset

) przy pierwszym połączeniu.
 
\end_layout

\begin_layout Standard
Oprócz wspomnianego serwera aplikacji umożliwiającego pobranie plików HTML,
 CSS oraz JS do działania programu niezbędny jest drugi serwer o
\begin_inset space ~
\end_inset

architekturze REST.
 Umożliwia on rejestrację i
\begin_inset space ~
\end_inset

autoryzację użytkowników oraz jest odpowiedzialny za tworzenie konwersacji
 i
\begin_inset space ~
\end_inset

przydzielanie do nich odpowiednich użytkowników.
\end_layout

\begin_layout Standard
Serwer REST komunikuje się z
\begin_inset space ~
\end_inset

trzecią warstwą — bazą danych.
 Baza danych typu dokumentowego (NoSQL) przechowuje niezbędne minimum informacji
 o
\begin_inset space ~
\end_inset

użytkowniku, dzięki którym możliwe jest prowadzenie rozmów.
 
\end_layout

\begin_layout Standard
Kolejnym modułem jest wbudowana w
\begin_inset space ~
\end_inset

klienta biblioteka WebTorrent do obsługi protokołu BitTorrent.
 Pozwala ona na bezpośrednią komunikację pomiędzy klientami.
 Wykorzystywana jest do przekazywania wiadomości.
 
\end_layout

\begin_layout Standard
Z specyfikacji biblioteki i
\begin_inset space ~
\end_inset

protokołu wynika między innymi konieczność utrzymywania dodatkowych serwerów
 — trackerów.
 Ze względu na fakt, że biblioteka jest oprogramowaniem open-source, istnieje
 możliwość samodzielnego uruchomienia tego typu serwera, jednak na potrzeby
 testów nie było to konieczne — istnieją w
\begin_inset space ~
\end_inset

sieci publiczne trackery, z
\begin_inset space ~
\end_inset

których można skorzystać.
\end_layout

\begin_layout Standard
Przedostatnim modułem koniecznym do prawidłowego działania komunikatora
 jest rozproszona tablica mieszająca (DHT) utrzymywana przez klienty, a
\begin_inset space ~
\end_inset

używana do zapisywania i
\begin_inset space ~
\end_inset

odczytywania info hasha najnowszej wysyłanej wiadomości.
 Klient w
\begin_inset space ~
\end_inset

momencie rozpoczęcia udostępniania wiadomości zapisuje jej info hash w
\begin_inset space ~
\end_inset

DHT, a
\begin_inset space ~
\end_inset

odbiorcy mogą go odczytać i
\begin_inset space ~
\end_inset

rozpocząć pobieranie komunikatu.
 
\end_layout

\begin_layout Standard
Ostatnim elementem są publiczne serwery STUN (Session Traversal Utilities
 for NAT).
 Dzięki nim możliwe jest skomunikowanie ze sobą dwóch klientów znajdujących
 się w
\begin_inset space ~
\end_inset

sieciach, których router stosuje translację adresów sieciowych.
 Takie serwery również istnieją w
\begin_inset space ~
\end_inset

sieci więc ich implementacja i
\begin_inset space ~
\end_inset

uruchomienie nie było konieczne.
 Za łączenie się z
\begin_inset space ~
\end_inset

nimi odpowiedzialna jest biblioteka WebTorrent.
\end_layout

\begin_layout Section
Serwer REST i
\begin_inset space ~
\end_inset

Baza Danych
\end_layout

\begin_layout Standard
Serwer został napisany w
\begin_inset space ~
\end_inset

języku Python z
\begin_inset space ~
\end_inset

użyciem biblioteki Eve 
\begin_inset CommandInset citation
LatexCommand cite
key "python-eve"

\end_inset

, która w
\begin_inset space ~
\end_inset

łatwy sposób pozwala uruchomić serwer REST oferujący podstawowe operacje
 CRUD (Create, Read, Update, Delete) na obiektach.
 Biblioteka automatycznie generuje dla obiektów ścieżki dostępu REST z
\begin_inset space ~
\end_inset

odpowiednimi metodami HTTP oraz zapisuje zmiany dokonywane na obiektach
 w
\begin_inset space ~
\end_inset

podłączonej bazie danych.
 Wybór tej biblioteki wynika z
\begin_inset space ~
\end_inset

faktu, że serwer REST w
\begin_inset space ~
\end_inset

projekcie pełni niewielką rolę — wraz z
\begin_inset space ~
\end_inset

bazą danych przechowuje jedynie te dane, które mogłyby zostać utracone,
 gdyby były zapisane jedynie w
\begin_inset space ~
\end_inset

przeglądarce użytkownika — wtedy użytkownik straciłby dostęp do swojego
 konta i
\begin_inset space ~
\end_inset

informacji o
\begin_inset space ~
\end_inset

przynależności do konwersacji.
 
\end_layout

\begin_layout Standard
Serwer przechowuje dane w
\begin_inset space ~
\end_inset

nierelacyjnej (dokumentowej) bazie danych MongoDB.
 Struktura dokumentów w
\begin_inset space ~
\end_inset

bazie odzwierciedla bezpośrednio schemat zaprojektowany w
\begin_inset space ~
\end_inset

serwerze.
 
\end_layout

\begin_layout Standard
W kolejnych punktach przybliżono szczegóły obiektów 
\begin_inset Quotes pld
\end_inset

użytkownik
\begin_inset Quotes prd
\end_inset

 i
\begin_inset space ~
\end_inset


\begin_inset Quotes pld
\end_inset

konwersacja
\begin_inset Quotes prd
\end_inset

 — ich atrybuty i
\begin_inset space ~
\end_inset

metody REST.
 
\end_layout

\begin_layout Subsection
Użytkownicy i
\begin_inset space ~
\end_inset

logowanie
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:uzytkownicy i logowanie"

\end_inset


\end_layout

\begin_layout Standard
Encja user posiada następujące atrybuty: 
\end_layout

\begin_layout Itemize
id (nadawany automatycznie), 
\end_layout

\begin_layout Itemize
username, 
\end_layout

\begin_layout Itemize
email, 
\end_layout

\begin_layout Itemize
password,
\end_layout

\begin_layout Itemize
salt.
 
\end_layout

\begin_layout Standard
W trakcie rejestracji serwer automatycznie uzupełnia pole salt, które wraz
 z
\begin_inset space ~
\end_inset

przesłanym hasłem zostaje zapisane jako wynik funkcji skrótu kryptograficznego
 BCrypt.
 Zapewnia to wyższy poziom bezpieczeństwa niż przechowywanie hasła w
\begin_inset space ~
\end_inset

takiej postaci, w
\begin_inset space ~
\end_inset

jakiej zostało ono przesłane przez użytkownika.
 Niezalogowany użytkownik ma dostęp jedynie do metody POST na kolekcji users
 (rejestracja nowego użytkownika) oraz metody login (POST) — zalogowanie
 się do systemu.
 Dopiero po zalogowaniu możliwe jest odczytanie szczegółów swojego profilu
 lub profilu innej osoby (metodą GET z
\begin_inset space ~
\end_inset

podaniem odpowiedniego id).
 
\end_layout

\begin_layout Standard
W przypadku prawidłowego zalogowania serwer odsyła użytkownikowi szczegóły
 jego konta oraz dane poświadczające prawidłowe zalogowanie.
 Kontrola dostępu do ścieżek REST udostępnionych tylko dla zalogowanych
 użytkowników wykorzystuje najprostszy mechanizm autoryzacji — nagłówek
 HTTP Basic Authentication, który klient wypełnia danymi otrzymanymi od
 serwera podczas logowania.
\end_layout

\begin_layout Subsection
Konwersacje
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:Konwersacje"

\end_inset


\end_layout

\begin_layout Standard
Atrybuty encji conversations zostały wymienione poniżej: 
\end_layout

\begin_layout Itemize
id (nadawany automatycznie), 
\end_layout

\begin_layout Itemize
conversation_id (nazwa konwersacji; może być zdefiniowana przez użytkownika
 lub nadana losowo przez serwer), 
\end_layout

\begin_layout Itemize
user_id (id użytkownika),
\end_layout

\begin_layout Itemize
user_dht_id (klucz, pod którym użytkownik umieszcza info hash najnowszej
 wiadomości dla danej konwersacji w
\begin_inset space ~
\end_inset

DHT).
\end_layout

\begin_layout Standard
Ścieżki REST dla obiektu konwersacje są dostępne dla zalogowanego użytkownika.
 Taka osoba ma kilka możliwości:
\end_layout

\begin_layout Itemize
stworzenie i
\begin_inset space ~
\end_inset

automatyczne dołączenie do nowej konwersacji lub dołączenie do już istniejącej
 konwersacji (metoda POST), 
\end_layout

\begin_layout Itemize
pobranie informacji o
\begin_inset space ~
\end_inset

użytkownikach, którzy uczestniczą w
\begin_inset space ~
\end_inset

tej samej konwersacji co użytkownik, np.
 ich user_dht_id (metoda GET),
\end_layout

\begin_layout Itemize
wypisanie się z
\begin_inset space ~
\end_inset

konwersacji (metoda DELETE).
\end_layout

\begin_layout Section
Klient i
\begin_inset space ~
\end_inset

biblioteka WebTorrent
\end_layout

\begin_layout Standard
Zaimplementowany w
\begin_inset space ~
\end_inset

ramach projektu klient jest aplikacją webową typu Single Page Application.
 Do jej przygotowania wykorzystano framework AngularJS.
 Integralną częścią programu jest moduł do obsługi protokołu BitTorrent
 — biblioteka WebTorrent.
 Wygląd komunikatora przedstawiony został na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wygląd-aplikacji-klienta"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/wiadomosci.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Wygląd aplikacji klienta, ekran komunikatora
\begin_inset CommandInset label
LatexCommand label
name "fig:Wygląd-aplikacji-klienta"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Program klienta pozwala użytkownikowi na zalogowanie się do systemu komunikatora.
 Następnie użytkownik może dołączyć do konwersacji podając jej nazwę (conversati
on_id z
\begin_inset space ~
\end_inset

punktu 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Konwersacje"

\end_inset

) lub utworzyć nową konwersację.
 Głównym celem programu jest prowadzenie rozmowy z
\begin_inset space ~
\end_inset

innymi użytkownikami, którzy są zapisani do tej samej konwersacji — użytkownicy
 wysyłają i
\begin_inset space ~
\end_inset

odbierają wiadomości.
 Kluczową cechą komunikatora jest sposób, w
\begin_inset space ~
\end_inset

jaki instancje programu wymieniają się wiadomościami — nowo utworzona wiadomość
 wraz z
\begin_inset space ~
\end_inset

pewnymi metadanymi jest traktowana jako plik i
\begin_inset space ~
\end_inset

upubliczniana w
\begin_inset space ~
\end_inset

sieci P2P w
\begin_inset space ~
\end_inset

sposób opisany w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Scenariusz utworzenia torrenta"

\end_inset

.
 Odbiór wiadomości przebiega według scenariusza opisanego w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Scenariusz pobrania torrenta"

\end_inset

.
 W
\begin_inset space ~
\end_inset

kolejnych punktach przybliżone zostaną szczegóły działania programu.
\end_layout

\begin_layout Subsection
Logowanie
\end_layout

\begin_layout Standard
Na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Ekran-logowania"

\end_inset

 zaprezentowano wygląd ekranu logowania.
 Formularz pozwala na podanie adresu email oraz hasła niezbędnych do zalogowania
 się do systemu komunikatora.
 Zatwierdzenie danych przyciskiem 
\begin_inset Quotes pld
\end_inset

Sign in
\begin_inset Quotes prd
\end_inset

 powoduje wysłanie ich do serwera REST, na którym przechodzą one weryfikację,
 czy dany użytkownik istnieje oraz czy podał prawidłowe hasło.
 W
\begin_inset space ~
\end_inset

przypadku pomyślnego uwierzytelnienia, serwer odsyła szczegóły konta użytkownika
 i
\begin_inset space ~
\end_inset

dane niezbędne do autoryzacji, a
\begin_inset space ~
\end_inset

klient zapisuje je w
\begin_inset space ~
\end_inset

pamięci przeglądarki (local storage).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/logowanie.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ekran logowania
\begin_inset CommandInset label
LatexCommand label
name "fig:Ekran-logowania"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Inicjalizacja modułów
\end_layout

\begin_layout Standard
Poprawne zalogowanie do serwisu pozwala na przejście do głównego ekranu
 komunikatora (przedstawiony na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wygląd-aplikacji-klienta"

\end_inset

).
 Po wyświetleniu tego widoku następuje pobranie z
\begin_inset space ~
\end_inset

serwera REST niezbędnych informacji o
\begin_inset space ~
\end_inset

konwersacji (jeśli użytkownik już w
\begin_inset space ~
\end_inset

jakiejś uczestniczy), uruchomienie modułu torrent (wykorzystującego bibliotekę
 WebTorrent, odpowiedzialnego za wymianę wiadomości) oraz modułu, którego
 zadaniem jest przechowywanie posiadanych wiadomości i
\begin_inset space ~
\end_inset

kontakt z
\begin_inset space ~
\end_inset

bazą danych wbudowaną w
\begin_inset space ~
\end_inset

przeglądarkę.
 Szczegółowo ten proces został omówiony poniżej.
\end_layout

\begin_layout Standard
Jeśli użytkownik był zapisany do konwersacji to klient pobiera z
\begin_inset space ~
\end_inset

serwera REST szczegółowe informacje o
\begin_inset space ~
\end_inset

tej konwersacji (atrybuty przedstawione w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Konwersacje"

\end_inset

) oraz dane o
\begin_inset space ~
\end_inset

innych uczestnikach tej konwersacji — między innymi ich identyfikator user_dht_i
d, który jest niezbędny w
\begin_inset space ~
\end_inset

procesie odbierania wiadomości.
 Jeżeli użytkownik nie uczestniczył jeszcze w
\begin_inset space ~
\end_inset

żadnej konwersacji to wyświetlone zostaje pole umożliwiające podanie jej
 nazwy (conversation_id) — rysunek 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Dołączanie-do-konwersacji"

\end_inset

.
 Szczegóły dołączania do konwersacji opisano w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:utw-dolacz-do-konwersacji"

\end_inset

.
\end_layout

\begin_layout Standard
Kolejnym krokiem jest uruchomienie modułu odpowiedzialnego za przechowywanie
 wiadomości (nazywany dalej modułem wiadomości).
 Moduł korzysta z
\begin_inset space ~
\end_inset

bazy danych typu klucz-wartość znajdującej się w
\begin_inset space ~
\end_inset

przeglądarce (IndexedDB) do 
\begin_inset Quotes pld
\end_inset

trwałego
\begin_inset Quotes prd
\end_inset

 zapisywania wysłanych i
\begin_inset space ~
\end_inset

odebranych wiadomości.
 Słowo 
\begin_inset Quotes pld
\end_inset

trwałego
\begin_inset Quotes prd
\end_inset

 jest ujęte w
\begin_inset space ~
\end_inset

cudzysłów, ponieważ użytkownik może w
\begin_inset space ~
\end_inset

każdej chwili usunąć dane.
 Jedynym sposobem, by je w
\begin_inset space ~
\end_inset

takiej sytuacji odzyskać jest pobranie ich od innego użytkownika.
 Podczas inicjalizacji moduł wczytuje do pamięci podręcznej wszystkie wiadomości
 znajdujące się w
\begin_inset space ~
\end_inset

bazie danych — dzięki temu będą one dostępne dla modułu torrent.
\end_layout

\begin_layout Standard
Ostatni etap przygotowania aplikacji do pełnego działania wymaga uruchomienia
 modułu torrent obsługującego komunikację poprzez protokół BitTorrent.
 W
\begin_inset space ~
\end_inset

ramach inicjalizacji moduł włącza klienta sieci P2P i
\begin_inset space ~
\end_inset

rozpoczyna ponowne udostępnianie posiadanych wiadomości.
\end_layout

\begin_layout Subsection
Utworzenie lub dołączenie do konwersacji 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:utw-dolacz-do-konwersacji"

\end_inset


\end_layout

\begin_layout Standard
W celu prowadzenia rozmowy z
\begin_inset space ~
\end_inset

użytkownikami konieczne jest dołączenie do wspólnej konwersacji.
 Rysunek 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Dołączanie-do-konwersacji"

\end_inset

 pokazuje formularz umożliwiający utworzenie nowej rozmowy lub podanie nazwy
 istniejącej.
 Użytkownik może rozpocząć nową konwersację i
\begin_inset space ~
\end_inset

poczekać, aż inni do niej dołączą lub samemu dołączyć do już istniejącej.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/dolacz.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Dołączanie do konwersacji
\begin_inset CommandInset label
LatexCommand label
name "fig:Dołączanie-do-konwersacji"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
W pierwszym przypadku użytkownik wybiera opcję 
\begin_inset Quotes pld
\end_inset

Create new
\begin_inset Quotes prd
\end_inset

.
 Aplikacja wysyła do serwera REST żądanie stworzenia konwersacji o
\begin_inset space ~
\end_inset

losowej nazwie.
 Serwer automatycznie dołącza użytkownika do nowej konwersacji i
\begin_inset space ~
\end_inset

odpowiada odsyłając nazwę konwersacji (conversation_id).
 Użytkownik zobaczy tę nazwę w
\begin_inset space ~
\end_inset

polu 
\begin_inset Quotes pld
\end_inset

conversation ID
\begin_inset Quotes prd
\end_inset

.
 Zadaniem użytkownika jest teraz rozesłanie nazwy konwersacji do osób, z
\begin_inset space ~
\end_inset

którymi chce prowadzić rozmowę.
 Może to zrobić, podobnie jak w
\begin_inset space ~
\end_inset

przypadku komunikatora Darkwire (
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Darkwire"

\end_inset

), na przykład za pośrednictwem email, SMS lub przekazać osobiście.
\end_layout

\begin_layout Standard
Drugi przypadek zakłada, że użytkownik otrzymał od kogoś nazwę konwersacji
 — wpisuje ją w
\begin_inset space ~
\end_inset

pole 
\begin_inset Quotes pld
\end_inset

conversation ID
\begin_inset Quotes prd
\end_inset

 i
\begin_inset space ~
\end_inset

zatwierdza przyciskiem 
\begin_inset Quotes pld
\end_inset

Join
\begin_inset Quotes prd
\end_inset

.
 Klient wysyła do serwera REST żądanie, a
\begin_inset space ~
\end_inset

serwer zapisuje w
\begin_inset space ~
\end_inset

bazie danych fakt dołączenia użytkownika do konwersacji.
 Serwer w
\begin_inset space ~
\end_inset

odpowiedzi informuje klienta o
\begin_inset space ~
\end_inset

pomyślnym zakończeniu procedury.
 
\end_layout

\begin_layout Standard
Dodatkowym założeniem, które należy spełnić w
\begin_inset space ~
\end_inset

obu przypadkach przed dołączeniem do konwersacji jest posiadanie przez użytkowni
ka unikalnego user_dht_id (atrybut z
\begin_inset space ~
\end_inset

punktu 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Konwersacje"

\end_inset

).
 Jest to klucz w
\begin_inset space ~
\end_inset

DHT, pod którym użytkownik umieszcza informację o
\begin_inset space ~
\end_inset

najnowszej wysłanej przez siebie wiadomości (jej info hash).
 Wartość user_dht_id powinna być unikalna.
 Należy ją przesłać razem z
\begin_inset space ~
\end_inset

żądaniem opisanym w
\begin_inset space ~
\end_inset

powyższych przypadkach.
 
\end_layout

\begin_layout Subsection
Struktura komunikatu
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:Struktura komunikatu"

\end_inset


\end_layout

\begin_layout Standard
Wiadomość przesyłana między uczestnikami rozmowy ma następującą strukturę:
\end_layout

\begin_layout Itemize
content (treść wiadomości),
\end_layout

\begin_layout Itemize
type (typ wiadomości, tekst, plik lub kontrolna),
\end_layout

\begin_layout Itemize
timestamp (znacznik czasu nadania wiadomości),
\end_layout

\begin_layout Itemize
sender (nadawca wiadomości),
\end_layout

\begin_layout Itemize
previousInfoHash (wartość info hash poprzedniej wiadomości).
\end_layout

\begin_layout Standard
Z własności protokołu BitTorrent wynika, że torrenty są niezmienne (immutable)
 — zawartość plików lub ich liczba nie może ulec zmianie bez zmiany wartości
 info hash.
 Konieczne zatem było przyjęcie założenia, że każda nowa wiadomość wysłana
 przez użytkownika staje się nowym torrentem.
 Scenariusz, w
\begin_inset space ~
\end_inset

którym użytkownik dodaje wiadomość jako kolejny plik do istniejącego torrenta
 jest na chwilę obecną niemożliwy do zrealizowania, chociaż istnieją próby
 wdrożenia takiej możliwości (w protokole BitTorrent 
\begin_inset CommandInset citation
LatexCommand cite
key "bep39-bt,bep46-bt"

\end_inset

 oraz w
\begin_inset space ~
\end_inset

bibliotece WebTorrent 
\begin_inset CommandInset citation
LatexCommand cite
key "bep46-wt"

\end_inset

).
 Niemniej jednak, zdecydowano o
\begin_inset space ~
\end_inset

zachowaniu przyjętego założenia.
 
\end_layout

\begin_layout Standard
Zastosowanie znaczników czasowych pozwala na zdefiniowanie kolejności wiadomości
 — ich odbiorcy będą w
\begin_inset space ~
\end_inset

stanie posortować odbierane komunikaty zgodnie z
\begin_inset space ~
\end_inset

porządkiem FIFO.
 Znaczniki dodatkowo gwarantują globalne uporządkowanie wiadomości (total
 order) — jeśli wszyscy użytkownicy uczestniczący w
\begin_inset space ~
\end_inset

jednej konwersacji odbiorą wszystkie wiadomości (każdy będzie posiadał identyczn
y zbiór), to zobaczą je w
\begin_inset space ~
\end_inset

takiej samej kolejności.
 W
\begin_inset space ~
\end_inset

trakcie implementowania projektu zdecydowano, że każda odebrana wiadomość
 będzie natychmiast wyświetlana — aplikacja nie czeka na pobranie starszych
 wiadomości wysłanych przez danego nadawcę.
 Narusza to co prawda oba wspomniane założenia, ale jedynie tymczasowo,
 do momentu pobrania wszystkich wcześniejszych wiadomości.
 Od tej chwili założenia pozostają spełnione.
 
\end_layout

\begin_layout Standard
Użycie znaczników nie gwarantuje jednak przyczynowego uporządkowania (causal
 order), ponieważ zegary na maszynach użytkowników nie są zsynchronizowane.
 W
\begin_inset space ~
\end_inset

większości przypadków 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
niewielka
\end_layout

\end_inset

 różnica czasu pozwoli na zachowanie uporządkowania przyczynowego.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Niewielka
\end_layout

\end_inset

 różnica czasu 
\begin_inset Formula $\Delta t$
\end_inset

 pomiędzy zegarami na maszynach dwóch użytkowników 
\begin_inset Formula $U_{N}$
\end_inset

 (użytkownik-nadawca) i
\begin_inset space ~
\end_inset


\begin_inset Formula $U_{O}$
\end_inset

 (użytkownik-odbiorca) oznacza, że 
\begin_inset Formula $\Delta t<min(t)+t_{0}$
\end_inset

, gdzie:
\end_layout

\begin_layout Itemize
\begin_inset Formula $min(t)$
\end_inset

 to minimalny czas, który upłynie od momentu nadania wiadomości 
\begin_inset Formula $m$
\end_inset

 przez 
\begin_inset Formula $U_{N}$
\end_inset

 (ustawienia czasu nadania w
\begin_inset space ~
\end_inset

polu timestamp) do momentu odebrania wiadomości 
\begin_inset Formula $m$
\end_inset

 przez 
\begin_inset Formula $U_{O}$
\end_inset

 (wyświetlenia wiadomości 
\begin_inset Formula $m$
\end_inset

 u
\begin_inset space ~
\end_inset

odbiorcy), 
\end_layout

\begin_layout Itemize
\begin_inset Formula $t_{0}$
\end_inset

 to czas potrzebny na napisanie i
\begin_inset space ~
\end_inset

nadanie odpowiedzi zależnej przyczynowo od wiadomości 
\begin_inset Formula $m$
\end_inset

 przez 
\begin_inset Formula $U_{O}$
\end_inset

, przy czym w
\begin_inset space ~
\end_inset

ogólności może on wynosić 0 (zero).
\end_layout

\begin_layout Standard
Możliwy jest jednak następujący scenariusz:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\Delta t>min(t)$
\end_inset

, 
\begin_inset Formula $t_{0}=0$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $T_{N}>T_{O}$
\end_inset

, gdzie 
\begin_inset Formula $T_{N}$
\end_inset

 i
\begin_inset space ~
\end_inset


\begin_inset Formula $T_{O}$
\end_inset

 to stan zegara maszyny nadawcy/odbiorcy w
\begin_inset space ~
\end_inset

danym momencie, a
\begin_inset space ~
\end_inset

nierówność oznacza, że gdyby porównać w
\begin_inset space ~
\end_inset

tym samym momencie zegary obu maszyn, to zegar maszyny nadawcy będzie wskazywał
 wyższą wartość.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $U_{N}$
\end_inset

 wysyła wiadomość 
\begin_inset Formula $m$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $U_{O}$
\end_inset

 odbiera wiadomość 
\begin_inset Formula $m$
\end_inset

 i
\begin_inset space ~
\end_inset

od razu na nią odpowiada (
\begin_inset Formula $t_{0}=0$
\end_inset

), wysyłając wiadomość 
\begin_inset Formula $n$
\end_inset

.
 Timestamp ustawiony w
\begin_inset space ~
\end_inset

odpowiedzi 
\begin_inset Formula $n$
\end_inset

 będzie miał niższą wartość niż timestamp otrzymany w
\begin_inset space ~
\end_inset

wiadomości 
\begin_inset Formula $m$
\end_inset

.
 Zarówno 
\begin_inset Formula $U_{N}$
\end_inset

 jak i
\begin_inset space ~
\end_inset


\begin_inset Formula $U_{O}$
\end_inset

 zaobserwują ten fakt — wiadomość 
\begin_inset Formula $n$
\end_inset

 zostanie wyświetlona powyżej wiadomości 
\begin_inset Formula $m$
\end_inset

 (co oznacza, że została wysłana wcześniej).
 
\end_layout

\begin_layout Subsection
Wysłanie wiadomości i
\begin_inset space ~
\end_inset

algorytm ZLT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:Wysyłanie wiadomości"

\end_inset


\end_layout

\begin_layout Standard
Aby wysłać wiadomość użytkownik podaje jej treść w
\begin_inset space ~
\end_inset

polu 
\begin_inset Quotes pld
\end_inset

Type message
\begin_inset Quotes prd
\end_inset

 i
\begin_inset space ~
\end_inset

zatwierdza przyciskiem 
\begin_inset Quotes pld
\end_inset

Send
\begin_inset Quotes prd
\end_inset

.
 Dalsze czynności wykonuje moduł torrent.
 Najpierw tworzy strukturę wiadomości (szerzej opisaną w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Struktura komunikatu"

\end_inset

).
 Następnie rozpoczyna udostępnianie komunikatu w
\begin_inset space ~
\end_inset

sieci P2P zgodnie z
\begin_inset space ~
\end_inset

opisem z
\begin_inset space ~
\end_inset

punktu 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Scenariusz utworzenia torrenta"

\end_inset

 (jest to zadanie biblioteki WebTorrent).
 Kolejnym krokiem jest zapamiętanie info hasha udostępnionej wiadomości.
 Klient zapisuje komunikat za pośrednictwem modułu wiadomości w
\begin_inset space ~
\end_inset

bazie danych IndexedDB — kluczem jest info hash, a
\begin_inset space ~
\end_inset

wartością struktura wiadomości.
 
\end_layout

\begin_layout Standard
W trakcie implementowania programu zaobserwowano, że wraz ze wzrostem liczby
 wiadomości umieszczanie każdej z
\begin_inset space ~
\end_inset

nich w
\begin_inset space ~
\end_inset

osobnym torrencie bardzo szybko prowadzi do nadmiernego zużywania zasobów,
 a
\begin_inset space ~
\end_inset

nawet do błędnego zakończenia programu.
 Z
\begin_inset space ~
\end_inset

tego powodu zdecydowano o
\begin_inset space ~
\end_inset

zaprojektowaniu i
\begin_inset space ~
\end_inset

wdrożeniu algorytmu zmniejszającego liczbę jednocześnie udostępnianych torrentów
 (nazywany dalej 
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
algorytmem ZLT
\end_layout

\end_inset

 — Zmniejszającym Liczbę Torrentów).
 Polega on na okresowym zastępowaniu torrentów zawierających pojedynczą
 wiadomość (poziom 0) jednym torrentem (nazywanym dalej 
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
torrentem kontrolnym
\end_layout

\end_inset

), który składa się z
\begin_inset space ~
\end_inset

wielu wiadomości (poziom 1).
 Algorytm wykonuje się rekurencyjnie — jeśli powstanie zbyt dużo torrentów
 kontrolnych na poziomie 1 to zostaną one połączone w
\begin_inset space ~
\end_inset

jeden torrent kontrolny na poziomie 2, itd.
 Algorytm uruchamiany jest jako kolejny krok po zleceniu zapisu do bazy
 danych.
 Został opisany szczegółowo poniżej:
\end_layout

\begin_layout Enumerate
Jeżeli na danym poziomie znajduje się zbyt dużo wiadomości (więcej niż zadany
 próg) to rozpocznij procedurę zamieniania wielu torrentów w
\begin_inset space ~
\end_inset

jeden torrent kontrolny.
 W
\begin_inset space ~
\end_inset

przeciwnym przypadku zakończ algorytm.
\end_layout

\begin_layout Enumerate
Stwórz listę wiadomości, które znajdą się w
\begin_inset space ~
\end_inset

nowym torrencie kontrolnym.
\end_layout

\begin_layout Enumerate
Stwórz listę info hashy, które posiadają wiadomości znajdujące się na liście
 w
\begin_inset space ~
\end_inset

punkcie 2.
 Dodatkowo, jeśli torrent kontrolny będzie zastępował inne torrenty kontrolne,
 stwórz listę info hashy zastępowanych torrentów kontrolnych.
\end_layout

\begin_layout Enumerate
Stwórz strukturę wiadomości (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Struktura komunikatu"

\end_inset

), w
\begin_inset space ~
\end_inset

polu 
\begin_inset Quotes pld
\end_inset

treść
\begin_inset Quotes prd
\end_inset

 umieść listy z
\begin_inset space ~
\end_inset

punktu 3.
\end_layout

\begin_layout Enumerate
Usuń z
\begin_inset space ~
\end_inset

klienta sieci P2P torrenty o
\begin_inset space ~
\end_inset

info hashach znajdujących się na listach z
\begin_inset space ~
\end_inset

punktu 3.
 Usunięcie wykonywane jest z
\begin_inset space ~
\end_inset

opóźnieniem (domyślnie po 5
\begin_inset space ~
\end_inset

sekundach).
\end_layout

\begin_layout Enumerate
Rozpocznij udostępnianie pliku składającego się z
\begin_inset space ~
\end_inset

wszystkich wiadomości z
\begin_inset space ~
\end_inset

punktu 2 oraz wiadomości z
\begin_inset space ~
\end_inset

punktu 4 — procedura identyczna jak wysyłanie zwykłej wiadomości.
 W
\begin_inset space ~
\end_inset

bazie danych zapisywana jest wiadomość z
\begin_inset space ~
\end_inset

punktu 4 oraz usuwane z
\begin_inset space ~
\end_inset

niej są te zastąpione.
 
\end_layout

\begin_layout Enumerate
Jeśli stworzenie nowego torrenta kontrolnego spowodowało, że na jego poziomie
 znalazło się zbyt wiele torrentów, wykonaj algorytm dla tego poziomu (od
 punktu 1).
\end_layout

\begin_layout Standard
Po zakończeniu algorytmu należy wykonać ostatni krok, którym jest umieszczenie
 wartości najnowszego info hasha w
\begin_inset space ~
\end_inset

DHT pod kluczem user_dht_id.
 Działanie DHT zostało szczegółowo opisane w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:DHT"

\end_inset

.
 
\end_layout

\begin_layout Standard
Dla poprawnego działania programu kluczowe jest, by procedura wysyłania
 kolejnej wiadomości 
\begin_inset Formula $m_{j}$
\end_inset

 rozpoczęła się dopiero po zakończeniu procedury dla poprzedniej wiadomości
 
\begin_inset Formula $m_{i}$
\end_inset

.
 Wynika to z
\begin_inset space ~
\end_inset

konieczności podania wartości info hash wiadomości 
\begin_inset Formula $m_{i}$
\end_inset

 w
\begin_inset space ~
\end_inset

strukturze wiadomości 
\begin_inset Formula $m_{j}.$
\end_inset


\end_layout

\begin_layout Standard
Domyślnie algorytm umieszcza 5 wiadomości w
\begin_inset space ~
\end_inset

torrencie kontrolnym.
 W
\begin_inset space ~
\end_inset

teście przedstawionym w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:wpływ liczby wiad w zlt"

\end_inset

 zbadano działanie aplikacji, gdy ta liczba jest inna.
\end_layout

\begin_layout Standard
Zaletą algorytmu ZLT jest znaczne zmniejszenie liczby jednocześnie udostępnianyc
h torrentów, a
\begin_inset space ~
\end_inset

to obniża zużycie zasobów.
 Wadą natomiast jest powtórne wysyłanie wiadomości, które uczestnicy rozmowy
 mogli już wcześniej odebrać — przykładowo, klient odebrał 4 kolejne wiadomości
 będące pojedynczymi torrentami, a
\begin_inset space ~
\end_inset

następnie pobrał torrent kontrolny zawierający 5 wiadomości, spośród których
 4 już posiada i
\begin_inset space ~
\end_inset

jedną nową.
 Oznacza to, że 80% przesłanych danych było zbędne.
 
\end_layout

\begin_layout Subsection
Odebranie wiadomości
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:Odebranie_wiadomości"

\end_inset


\end_layout

\begin_layout Standard
Procedura odebrania wiadomości rozpoczyna się okresowym sprawdzeniem najnowszej
 wartości info hash w
\begin_inset space ~
\end_inset

DHT dla kluczy user_dht_id poszczególnych uczestników rozmowy.
 Moduł torrent sprawdza, czy torrenty o
\begin_inset space ~
\end_inset

tych info hashach znajdują się na liście pobieranych torrentów lub czy zostały
 już pobrane i
\begin_inset space ~
\end_inset

znajdują się na liście wiadomości w
\begin_inset space ~
\end_inset

module wiadomości.
 Jeśli żaden z
\begin_inset space ~
\end_inset

powyższych warunków nie jest spełniony, wtedy na podstawie wartości info
 hash tworzony jest magnet link i
\begin_inset space ~
\end_inset

rozpoczyna się procedura pobrania torrenta (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Scenariusz pobrania torrenta"

\end_inset

).
 Biblioteka WebTorrent pozwala na zarządzanie plikami w
\begin_inset space ~
\end_inset

trakcie ich pobierania — możliwe jest odczytanie zawartości wiadomości pobranych
 w
\begin_inset space ~
\end_inset

całości, podczas gdy pozostałe pliki są dalej przesyłane.
 Odczytana wiadomość zostaje zapisana za pośrednictwem modułu wiadomości
 w
\begin_inset space ~
\end_inset

bazie danych IndexedDB oraz na liście wiadomości do wyświetlenia użytkownikowi.
 Oprócz tego moduł torrent sprawdza, czy poprzednia wiadomość wysłana przez
 nadawcę znajduje się na liście wiadomości lub liście pobieranych torrentów.
 Jeśli nie — moduł rozpoczyna procedurę pobierania tej wiadomości.
\end_layout

\begin_layout Standard
W sytuacji, gdy pobrano torrent kontrolny, moduł torrent usuwa z
\begin_inset space ~
\end_inset

klienta sieci P2P torrenty, które znajdują się na liście przesłanej w polu
 
\begin_inset Quotes pld
\end_inset

treść
\begin_inset Quotes prd
\end_inset

 wiadomości.
 Moduł zapisuje również w
\begin_inset space ~
\end_inset

bazie danych brakujące wiadomości, o
\begin_inset space ~
\end_inset

ile istnieje taka konieczność.
 Podobnie jak w
\begin_inset space ~
\end_inset

przypadku zwykłego torrenta, jeśli brakuje poprzedniej wiadomości, moduł
 zacznie jej pobieranie.
 
\end_layout

\begin_layout Standard
Koncepcja wysyłania i
\begin_inset space ~
\end_inset

odbierania wiadomości wykorzystująca protokół BitTorrent umożliwia odebranie
 wiadomości nawet w
\begin_inset space ~
\end_inset

sytuacji, gdy jej nadawca nie jest dostępny.
 Warunkiem koniecznym jest oczywiście dostępność innego uczestnika rozmowy,
 który zdążył tę wiadomość pobrać, lub obecność wielu użytkowników, z
\begin_inset space ~
\end_inset

których każdy posiada fragmenty wiadomości (pieces).
 W
\begin_inset space ~
\end_inset

drugim przypadku niezbędne jest założenie, że każdy fragment (piece) torrenta
 został pobrany przez co najmniej jednego użytkownika.
\end_layout

\begin_layout Subsection
Udostępnianie starych torrentów
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:Udostępnianie starych torr"

\end_inset


\end_layout

\begin_layout Standard
W celu zmniejszenia liczby torrentów, które klient w
\begin_inset space ~
\end_inset

danej chwili pobiera i
\begin_inset space ~
\end_inset

wysyła, zdecydowano o
\begin_inset space ~
\end_inset

wprowadzeniu mechanizmu ograniczającego udostępnianie starych wiadomości.
 Przyjęto założenie, że każdy uczestnik rozmowy będzie pobierał wszystkie
 nowe wiadomości minimum raz w
\begin_inset space ~
\end_inset

tygodniu.
 Podczas inicjalizacji modułu torrent każdy klient rozpoczyna ponowne udostępnia
nie jedynie tych wiadomości i
\begin_inset space ~
\end_inset

torrentów kontrolnych, których data wysłania jest młodsza niż 1 tydzień.
 Możliwy jest przypadek, w
\begin_inset space ~
\end_inset

którym udostępniany torrent kontrolny zawiera wiadomości starsze niż 1 tydzień
 — przyjęto, iż jest to sytuacja zgodna z
\begin_inset space ~
\end_inset

oczekiwaniami.
 Wiadomości te i
\begin_inset space ~
\end_inset

tak przestaną być udostępniane maksymalnie w
\begin_inset space ~
\end_inset

ciągu tygodnia ze względu na przedawnienie torrenta kontrolnego, który je
 zawiera.
\end_layout

\begin_layout Standard
Wadą tego rozwiązania jest brak możliwości przeczytania wiadomości starszych
 niż 1 tydzień przez osoby, które dopiero dołączyły do rozmowy.
 Zdecydowano, że nie jest to poważny błąd, a
\begin_inset space ~
\end_inset

wręcz zaleta w
\begin_inset space ~
\end_inset

sytuacji, gdy konwersacja zawiera dużą liczbę wiadomości.
 Dołączający klient zmuszony byłby do pobrania całej historii konwersacji,
 co może być operacją kosztowną komunikacyjnie.
\end_layout

\begin_layout Subsection
Zbiór sąsiadów
\end_layout

\begin_layout Standard
W
\begin_inset space ~
\end_inset

ramach pojedynczej konwersacji klienty wysyłają i
\begin_inset space ~
\end_inset

odbierają wiadomości.
 Każda wiadomość zostaje umieszczona w
\begin_inset space ~
\end_inset

osobnym torrencie, a
\begin_inset space ~
\end_inset

te mogą zostać połączone w
\begin_inset space ~
\end_inset

nowy torrent kontrolny przez algorytm ZLT.
 Wszelka wymiana danych pomiędzy klientami odbywa się zatem w
\begin_inset space ~
\end_inset

swarmach, dla każdego torrenta z
\begin_inset space ~
\end_inset

osobna.
 Struktura (np.
 łańcuch, pierścień czy graf pełny) jaką utworzą peery w
\begin_inset space ~
\end_inset

swarmie zależy od postępu algorytmu wymiany danych.
 Możliwe jest ręczne zarządzanie listą peerów, z
\begin_inset space ~
\end_inset

którymi dany klient posiada nawiązane połączenia, jednak w
\begin_inset space ~
\end_inset

ramach systemu komunikatora nie zdecydowano się na ten krok — rolę zarządcy
 wystarczająco dobrze spełniają algorytmy wbudowane w
\begin_inset space ~
\end_inset

protokół BitTorrent.
 W
\begin_inset space ~
\end_inset

trakcie działania aplikacji i
\begin_inset space ~
\end_inset

tworzenia przez użytkowników nowych wiadomości, klienty dynamicznie dołączają
 do powstających swarmów oraz odłączają się od tych, które przestały funkcjonowa
ć, gdyż dany torrent został zastąpiony przez nowy (kontrolny).
 
\end_layout

\begin_layout Standard
Konwersacje są odseparowane od siebie, co oznacza, że klienty nie nawiązują
 połączeń z
\begin_inset space ~
\end_inset

peerami znajdującymi się w
\begin_inset space ~
\end_inset

swarmach należących do innej rozmowy.
 
\end_layout

\begin_layout Section
DHT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:DHT"

\end_inset


\end_layout

\begin_layout Standard
Moduł DHT czyli rozproszona tablica mieszająca jest systemem składającym
 się z
\begin_inset space ~
\end_inset

wielu węzłów pozwalającym na przechowywanie informacji.
 Węzłem staje się każdy klient systemu komunikatora.
 Węzły dzielą między sobą pewien zbiór kluczy i
\begin_inset space ~
\end_inset

posiadają możliwość komunikowania się z
\begin_inset space ~
\end_inset

innymi węzłami i
\begin_inset space ~
\end_inset

przesyłania im posiadanych informacji.
 Zadaniem węzła jest przechowywanie informacji dotyczących przypisanego
 mu podzbioru kluczy.
 Każda informacja zapisywana w
\begin_inset space ~
\end_inset

DHT posiada etykietę (w przypadku systemu komunikatora jest nią user_dht_id),
 która następnie zamieniana jest na klucz przez funkcję haszującą.
 Informacją w
\begin_inset space ~
\end_inset

systemie komunikatora jest info hash najnowszej wysłanej przez klienta wiadomośc
i.
 
\end_layout

\begin_layout Standard
Przed przystąpieniem do pracy nad projektem zakładano, że biblioteka WebTorrent
 jest wyposażona w
\begin_inset space ~
\end_inset

mechanizm opisany powyżej.
 Jest to częściowo prawda — wersja biblioteki dla programów na platformę
 Node.js posiada taką możliwość.
 Niestety brakuje jej w
\begin_inset space ~
\end_inset

wersji dla przeglądarek.
 Powody dla braku wsparcia DHT w
\begin_inset space ~
\end_inset

bibliotece WebTorrent w
\begin_inset space ~
\end_inset

przeglądarce są następujące:
\end_layout

\begin_layout Itemize
Przeglądarki mogą komunikować się bezpośrednio ze sobą jedynie dzięki protokołow
i WebRTC.
 Funkcjonuje on poprawnie dla niewielkiej liczby jednoczesnych połączeń,
 jednak na potrzeby zaimplementowania DHT konieczne byłoby utrzymywanie
 większej liczby równoległych połączeń, co może prowadzić do szybkiego wyczerpan
ia zasobów przeglądarki.
\end_layout

\begin_layout Itemize
Jednym ze sposobów zaimplementowania DHT dla biblioteki WebTorrent jest
 zaadaptowanie algorytmu Kademlia działającego już dla protokołu BitTorrent.
 Wymaga on jednak zapamiętywania listy węzłów, z
\begin_inset space ~
\end_inset

którymi dany węzeł nawiązał dotychczas połączenie, a
\begin_inset space ~
\end_inset

to oznacza, że połączenia WebRTC muszą pozostać otwarte (nie można ich zakończyć
).
 Jest to o
\begin_inset space ~
\end_inset

wiele bardziej kosztowne w
\begin_inset space ~
\end_inset

przypadku WebRTC niż w
\begin_inset space ~
\end_inset

oryginalnej implementacji, która korzysta z
\begin_inset space ~
\end_inset

bezpołączeniowego protokołu komunikacji UDP.
\end_layout

\begin_layout Itemize
Kolejnym, bardzo istotnym problemem jest brak wsparcia protokołu WebRTC
 dla dedykowanych wątków roboczych (WebWorker, ServiceWorker, itp.).
 Bez tego wsparcia kod obsługujący DHT musi być wykonywany w
\begin_inset space ~
\end_inset

głównym wątku danej strony internetowej, a
\begin_inset space ~
\end_inset

to może doprowadzić nawet do całkowitego zablokowania interfejsu.
 W
\begin_inset space ~
\end_inset

chwili obecnej trwają próby wprowadzenia wsparcia protokołu dla wątków roboczych
 — być może w
\begin_inset space ~
\end_inset

przyszłości ten problem zostanie rozwiązany.
 
\end_layout

\begin_layout Standard
W zaistniałej sytuacji przeprowadzono poszukiwania alternatywnej biblioteki
 udostępniającej mechanizm DHT dla przeglądarek.
 Znalezione biblioteki pozwalały programiście na zdefiniowanie kanału wymiany
 informacji pomiędzy węzłami 
\begin_inset CommandInset citation
LatexCommand cite
key "kademlia-dht"

\end_inset

 lub posiadały działający mechanizm 
\begin_inset CommandInset citation
LatexCommand cite
key "kadtools"

\end_inset

.
 Jednakże w
\begin_inset space ~
\end_inset

trakcie wstępnych testów okazało się, że żadna biblioteka nie zapewnia satysfakc
jonujących rezultatów — informacje były przesyłane zbyt długo lub w
\begin_inset space ~
\end_inset

ogóle nie docierały do niektórych węzłów.
 
\end_layout

\begin_layout Standard
Ze względu na brak zaimplementowanego mechanizmu DHT w
\begin_inset space ~
\end_inset

bibliotece WebTorrent oraz niesatysfakcjonujące alternatywy zdecydowano
 o
\begin_inset space ~
\end_inset

zastąpieniu tego mechanizmu atrapą (mock).
 Funkcjonalność tego rozwiązania pozostaje niezmienna — każdy klient ma
 możliwość zapisania najnowszej wartości info hash pod określonym kluczem
 (user_dht_id) oraz odczytania tej informacji.
 Zmianie uległ sposób przechowywania informacji — zadanie to nie należy
 już do sieci powiązanych ze sobą klientów, a
\begin_inset space ~
\end_inset

stało się jednym z
\begin_inset space ~
\end_inset

zadań serwera REST.
 Serwer udostępnia ścieżkę REST /dht, która umożliwia następujące akcje:
\end_layout

\begin_layout Itemize
metoda HTTP GET z
\begin_inset space ~
\end_inset

parametrem user_dht_id pozwala na pobranie wartości przechowywanej dla klucza
 user_dht_id,
\end_layout

\begin_layout Itemize
metoda POST pozwala na zapisanie wartości dla klucza user_dht_id.
\end_layout

\begin_layout Section
Bezpieczeństwo i
\begin_inset space ~
\end_inset

kryptografia w
\begin_inset space ~
\end_inset

języku JavaScript
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Bezpieczeństwo, krypto, JS"

\end_inset


\end_layout

\begin_layout Standard
Mobilne i
\begin_inset space ~
\end_inset

dektopowe klienty aplikacji Bleep (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:bleep"

\end_inset

) oraz aplikacji Signal (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:signal"

\end_inset

) oferują szyfrowanie wiadomości.
 Webowy klient aplikacji Darkwire (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Darkwire"

\end_inset

) również.
 W
\begin_inset space ~
\end_inset

ramach niniejszej pracy magisterskiej zbadano sposób implementacji tego
 mechanizmu w
\begin_inset space ~
\end_inset

przytoczonych aplikacjach oraz podjęto próbę zaprojektowania go dla systemu
 komunikatora.
 
\end_layout

\begin_layout Standard
Poufność wiadomości w
\begin_inset space ~
\end_inset

systemie komunikatora jest konieczna, ponieważ każdy użytkownik systemu
 (ale też osoba spoza niego) ma możliwość pobrania i
\begin_inset space ~
\end_inset

odczytania treści wiadomości przesyłanych jako torrenty.
 Gdyby wiadomość była zaszyfrowana, posiadanie jej w
\begin_inset space ~
\end_inset

takiej formie nie powoduje negatywnych skutków.
 Głównym problemem do rozwiązania jest przechowywanie kluczy pozwalających
 na odczytanie zaszyfrowanych wiadomości i
\begin_inset space ~
\end_inset

podpisywanie wysyłanych treści.
 Problem przechowywania dotyczy zarówno zarządzania kluczami w
\begin_inset space ~
\end_inset

trakcie pracy aplikacji jak i
\begin_inset space ~
\end_inset

po jej zamknięciu — zapisanie kluczy w
\begin_inset space ~
\end_inset

pamięci trwałej.
 Klucz prywatny nie powinien być wysyłany poza urządzenie, na którym został
 wygenerowany.
 
\end_layout

\begin_layout Standard
Ostatecznie zrezygnowano z
\begin_inset space ~
\end_inset

wdrożenia szyfrowania wiadomości, choć technicznie jest to osiągalne, ponieważ
 mechanizm ten posiadałby istotne wady mogące powodować brak gwarancji poufności
 przesyłanych danych.
 Podsumowanie badań opisano w
\begin_inset space ~
\end_inset

poniższych punktach.
\end_layout

\begin_layout Subsection
Darkwire
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:darkwire-bezpieczenstwo"

\end_inset


\end_layout

\begin_layout Standard
Aplikacja webowa Darkwire automatycznie szyfruje wiadomości w
\begin_inset space ~
\end_inset

przeglądarce użytkownika przed wysłaniem ich do serwera.
 Serwer przesyła wiadomości do odbiorców, a
\begin_inset space ~
\end_inset

po dotarciu do nich, treść jest odszyfrowywana.
 W
\begin_inset space ~
\end_inset

programie zastosowano kryptografię klucza publicznego do stworzenia klucza
 symetrycznego danej wiadomości.
 Aplikacja korzysta z
\begin_inset space ~
\end_inset

Web Cryptography API 
\begin_inset CommandInset citation
LatexCommand cite
key "web cryptography api"

\end_inset

 do zarządzania kluczami kryptograficznymi.
 
\end_layout

\begin_layout Standard
Scenariusz uruchomienia programu i
\begin_inset space ~
\end_inset

przesłania zaszyfrowanej wiadomości jest następujący 
\begin_inset CommandInset citation
LatexCommand cite
key "darkwire szyfrowanie how it works"

\end_inset

:
\end_layout

\begin_layout Enumerate
Podczas uruchomienia, program tworzy nową rozmowę (chat room) oraz parę
 kluczy (publiczny i
\begin_inset space ~
\end_inset

prywatny).
 
\end_layout

\begin_layout Enumerate
W momencie dołączenia nowej osoby do rozmowy, aplikacje użytkowników wymieniają
 się kluczami publicznymi uczestników rozmowy.
 
\end_layout

\begin_layout Enumerate
W celu wysłania wiadomości program najpierw generuje 3 nowe klucze: symetryczny
 klucz sesji, klucz podpisujący (umożliwiający weryfikację sygnatury wiadomości)
 oraz wektor inicjujący (initialization vector).
 
\end_layout

\begin_layout Enumerate
Treść wiadomości zostaje zaszyfrowana przy pomocy klucza sesji i
\begin_inset space ~
\end_inset

wektora inicjującego.
 Oprócz tego tworzona jest sygnatura wiadomości przy użyciu klucza podpisującego.
 
\end_layout

\begin_layout Enumerate
Klucz sesji i
\begin_inset space ~
\end_inset

klucz podpisujący zostają zaszyfrowane kluczami publicznymi odbiorców, dla
 każdego z
\begin_inset space ~
\end_inset

osobna — ta technika pozwala na uniknięcie szyfrowania całej treści wiadomości
 osobno dla wszystkich odbiorców.
 
\end_layout

\begin_layout Enumerate
Ostatnim krokiem przed wysłaniem wiadomości jest przygotowanie paczki danych
 do wysłania — składa się ona z
\begin_inset space ~
\end_inset

zaszyfrowanej wiadomości, wektora inicjującego, sygnatury wiadomości, zaszyfrowa
nego klucza sesji oraz zaszyfrowanego klucza podpisującego.
 
\end_layout

\begin_layout Enumerate
Odbiorca, po otrzymaniu takiej paczki danych, odszyfrowuje swoim kluczem
 prywatnym klucze sesji oraz klucz podpisujący.
 Używając odszyfrowanego klucza sesji i
\begin_inset space ~
\end_inset

wektora inicjującego odbiorca odszyfrowuje treść wiadomości i
\begin_inset space ~
\end_inset

może zweryfikować sygnaturę wiadomości odszyfrowanym kluczem podpisującym.
 
\end_layout

\begin_layout Standard
Przedstawiony scenariusz gwarantuje poufność wiadomości i
\begin_inset space ~
\end_inset

autentyczność odbiorcy podczas normalnej pracy aplikacji.
 Istnieją jednak wektory ataku pozwalające na zdobycie kluczy prywatnych
 i
\begin_inset space ~
\end_inset

w
\begin_inset space ~
\end_inset

konsekwencji na odczytanie przesłanych wiadomości czy przejęcie kontroli
 nad kontem użytkownika i
\begin_inset space ~
\end_inset

podszywanie się pod nadawcę.
 Głównym problemem z
\begin_inset space ~
\end_inset

punktu widzenia bezpieczeństwa jest przechowywanie klucza prywatnego jako
 wartość zmiennej w
\begin_inset space ~
\end_inset

skrypcie JavaScript (lub w
\begin_inset space ~
\end_inset

niezabezpieczony sposób w
\begin_inset space ~
\end_inset

local storage czy IndexedDB).
 Wykorzystując choćby atak XSS (Cross-site scripting), czyli uruchomienie
 własnego skryptu osadzonego w
\begin_inset space ~
\end_inset

treści atakowanej strony, można pozyskać wrażliwe dane.
 Zmiany w
\begin_inset space ~
\end_inset

kodzie strony może dokonać nie tylko cracker, ale również twórca oprogramowania
 z
\begin_inset space ~
\end_inset

własnej woli lub zmuszony przez trzecią stronę (np.
 agencję rządową).
 
\end_layout

\begin_layout Standard
Użycie powyższej metody do przechowywania wrażliwych danych może prowadzić
 do ich kradzieży i
\begin_inset space ~
\end_inset

ujawnienia treści wiadomości.
 Jako usprawiedliwienie można podać przykład Messengera (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:messenger"

\end_inset

), który nie stosuje w
\begin_inset space ~
\end_inset

ogóle szyfrowania wiadomości — jedynym zabezpieczeniem jest przesyłanie
 ich do serwera szyfrowanymi kanałami.
 W
\begin_inset space ~
\end_inset

bazie danych są one zapisywane w
\begin_inset space ~
\end_inset

takiej samej formie, w
\begin_inset space ~
\end_inset

jakiej zostały wprowadzone przez użytkownika.
 Zdobycie dostępu do bazy danych przez osoby niepowołane spowoduje ujawnienie
 treści wiadomości.
 Niemniej jednak, taki wektor ataku wydaje się być mniej prawdopodobny —
 bazy danych są zazwyczaj lepiej zabezpieczone niż komputery użytkowników.
\end_layout

\begin_layout Standard
W aplikacjach webowych istnieje jeszcze inna możliwość przesyłania i
\begin_inset space ~
\end_inset

przechowywania poufnych informacji (np.
 tokenów uwierzytelniających), a
\begin_inset space ~
\end_inset

mianowicie ciasteczka (cookies).
 Te małe fragmenty tekstu są wysyłane przez serwer do klienta w
\begin_inset space ~
\end_inset

nagłówku HTTP, a
\begin_inset space ~
\end_inset

przeglądarka odsyła je wraz z
\begin_inset space ~
\end_inset

kolejnymi żądaniami.
 W
\begin_inset space ~
\end_inset

celu zabezpieczenia tych informacji stosuje się szyfrowany protokół (np.
 HTTPS) oraz ustawia niezbędne flagi (jak choćby httpOnly, secure, domain,
 path itd.).
 Ustawienie pierwszej flagi skutkuje brakiem dostępu do zawartości ciasteczka
 z
\begin_inset space ~
\end_inset

poziomu kodu JavaScript.
 Niestety w
\begin_inset space ~
\end_inset

systemie komunikatora ten sposób przechowywania poufnych informacji nie
 może być wykorzystany, gdyż większość operacji wykonywanych jest z
\begin_inset space ~
\end_inset

poziomu skryptu, a
\begin_inset space ~
\end_inset

komunikaty przesyłane są innymi protokołami niż HTTP.
 
\end_layout

\begin_layout Subsection
Bleep i
\begin_inset space ~
\end_inset

Signal
\end_layout

\begin_layout Standard
Natywne aplikacje mobilne mają nad aplikacjami webowymi istotną przewagę
 — umożliwiają programistom dostęp do pamięci trwałej urządzenia.
 Dodatkowo, systemy mobilne zwiększają bezpieczeństwo przechowywanych informacji
 poprzez izolację danych zapisywanych przez konkretną aplikację — inne programy
 nie mają dostępu do tych obszarów.
 Ta możliwość pozwala na znacznie bezpieczniejsze przechowywanie poufnych
 danych.
 Wszelkie operacje związane z
\begin_inset space ~
\end_inset

szyfrowaniem odbywają się na urządzeniach użytkowników.
\end_layout

\begin_layout Standard
Oprócz tego, twórcy przytoczonych aplikacji zastosowali znacznie bardziej
 rozbudowany mechanizm przesyłania wiadomości niż w
\begin_inset space ~
\end_inset

przypadku aplikacji Darkwire.
 W
\begin_inset space ~
\end_inset

aplikacji Signal wprowadzono choćby 
\begin_inset Quotes pld
\end_inset

The Double Ratchet Algorithm
\begin_inset Quotes prd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "signal double ratchet"

\end_inset

 — algorytm gwarantujący własność utajnienia przekazywania (forward secrecy).
 Każda wiadomość jest szyfrowana innym kluczem.
 Ponadto, nawet jeśli cracker uzyskałby dostęp do pojedynczej wiadomości
 i
\begin_inset space ~
\end_inset

jej metadanych, nie może na ich podstawie obliczyć wartości poprzednich
 ani przyszłych kluczy.
 Podobny mechanizm oferuje aplikacja Bleep 
\begin_inset CommandInset citation
LatexCommand cite
key "bleep forward secrecy"

\end_inset

.
 
\end_layout

\begin_layout Standard
Twórcy aplikacji Bleep umożliwiają użytkownikom wysyłanie wiadomości pod
 nieobecność odbiorcy — zapisywana jest ona wtedy w
\begin_inset space ~
\end_inset

DHT.
 Węzłami w
\begin_inset space ~
\end_inset

DHT są aplikacje użytkowników, więc dane przechowywane w
\begin_inset space ~
\end_inset

DHT również muszą być zaszyfrowane 
\begin_inset CommandInset citation
LatexCommand cite
key "bleep forward secrecy offline"

\end_inset

.
 Algorytm jest podobny do przedstawionego powyżej z
\begin_inset space ~
\end_inset

niewielką zmianą — nowy klucz generowany jest nie dla każdej wiadomości,
 a
\begin_inset space ~
\end_inset

dla paczki wiadomości nadanych podczas nieobecności odbiorcy.
 Gdy odbiorca staje się dostępny, odczytuje wiadomości i
\begin_inset space ~
\end_inset

generuje nowy klucz.
 
\end_layout

\begin_layout Subsection
Inne pomysły i
\begin_inset space ~
\end_inset

wnioski
\end_layout

\begin_layout Standard
Badanie rozwiązań wdrożonych w
\begin_inset space ~
\end_inset

powyższych aplikacjach doprowadziło do powstania innych koncepcji rozwoju
 systemu komunikatora prowadzących do zabezpieczenia konwersacji między
 użytkownikami.
 Przedstawione zostały poniżej.
\end_layout

\begin_layout Itemize
Przechowywanie kluczy publicznych i
\begin_inset space ~
\end_inset

prywatnych w
\begin_inset space ~
\end_inset

bazie danych z
\begin_inset space ~
\end_inset

dostępem poprzez serwer REST.
 Klucze mogą być generowane przez serwer lub przez klienta.
 Rozwiązanie nie jest poprawne jeśli zakłada się, że nikt poza nadawcą i
\begin_inset space ~
\end_inset

odbiorcami nie ma prawa odczytać treści wiadomości.
 Jeśli jednak założenie to zostanie złagodzone i
\begin_inset space ~
\end_inset

oprócz wspomnianych osób dostęp do treści wiadomości będzie miał zaufany
 serwer, rozwiązanie mogłoby zostać wprowadzone.
 W
\begin_inset space ~
\end_inset

tej sytuacji uzyskuje się poziom poufności podobny do aplikacji Messenger
 (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:messenger"

\end_inset

), w
\begin_inset space ~
\end_inset

przypadku której wiadomości również mogą być odczytane z
\begin_inset space ~
\end_inset

bazy danych.
 
\end_layout

\begin_layout Itemize
Rozwinięciem poprzedniego rozwiązania byłoby wygenerowanie pary kluczy po
 stronie klienta oraz dodatkowe zabezpieczenie ich w
\begin_inset space ~
\end_inset

taki sposób, by jedynie użytkownik miał możliwość odczytania ich po podaniu
 hasła dostępu.
 Następnie zaszyfrowane dane są wysyłane do serwera i
\begin_inset space ~
\end_inset

tam przechowywane.
 Na żądanie klienta, na przykład podczas uruchamiania aplikacji, dane są
 pobierane, użytkownik podaje hasło i
\begin_inset space ~
\end_inset

uzyskuje lokalnie dostęp do poufnych informacji.
 Niestety, oba rozwiązania są w
\begin_inset space ~
\end_inset

dalszym ciągu podatne na kradzież danych — odszyfrowane klucze są przetwarzane
 przez skrypt i
\begin_inset space ~
\end_inset

mogą zostać przechwycone.
\end_layout

\begin_layout Itemize
Ostatnim, póki co koncepcyjnym, pomysłem jest zastosowanie Web Cryptography
 API 
\begin_inset CommandInset citation
LatexCommand cite
key "webCrypto API w3,webCrypto-experimental "

\end_inset

.
 Konieczne jest jednak założenie, że nie będzie istniała możliwość odczytania
 czy importu kluczy prywatnych z
\begin_inset space ~
\end_inset

poziomu kodu JavaScript.
 Wszelkie operacje na poufnych danych (generowanie kluczy, szyfrowanie i
\begin_inset space ~
\end_inset

odszyfrowywanie danych) powinny być wykonywane przez algorytmy zaimplementowane
 bezpośrednio w
\begin_inset space ~
\end_inset

przeglądarce — dzięki temu unika się przechowywania kluczy prywatnych w
\begin_inset space ~
\end_inset

zmiennych i
\begin_inset space ~
\end_inset

ich przetwarzania przez kod JavaScript, a
\begin_inset space ~
\end_inset

to z
\begin_inset space ~
\end_inset

kolei uniemożliwia ich kradzież.
 Algorytmy dostępne byłyby przez API.
 
\end_layout

\begin_layout Section
Wykorzystane technologie
\end_layout

\begin_layout Standard
Podczas pracy nad projektem systemu komunikatora użyto wielu technologii,
 zwykle standardowych i popularnych dla danej platformy.
 Język programowania wykorzystany do implementacji serwera REST to język
 Python.
 Aplikacja kliencka powstała w języku JavaScript.
 
\end_layout

\begin_layout Standard
Klient jest aplikacją webową typu Single Page Application.
 Do zaimplementowania tego typu programu wykorzystano framework AngularJS,
 który został opisany w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:AngularJS"

\end_inset

.
 W punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:grunt bower yo"

\end_inset

 przedstawiono system budujący Grunt, menedżer pakietów Bower i generator
 szkieletu projektu Yeoman, które są zwykle wykorzystywane wraz z frameworkiem
 AngularJS.
 Oprócz standardowych funkcji dostępnych we wspomnianym frameworku oraz
 w języku JavaScript, skorzystano z funkcji znajdujących się w bibliotece
 Lodash (pkt.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lodash"

\end_inset

).
 W celu udostępnienia zbudowanego projektu przez serwer aplikacji, zastosowano
 platformę Node.js oraz framework Express (pkt.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:node"

\end_inset

).
\end_layout

\begin_layout Standard
Serwer REST został napisany przy wykorzystaniu frameworka Python Eve (pkt.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:py eve"

\end_inset

).
 Do wymiany informacji pomiędzy serwerem REST a aplikacjami klienckimi wykorzyst
ano format danych JSON (JavaScript Object Notation).
 Serwer zapisuje dane w bazie danych MongoDB (pkt.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:mongo"

\end_inset

).
 
\end_layout

\begin_layout Standard
W celu przeprowadzenia testów wydajności systemu komunikatora skorzystano
 z frameworka testującego Protractor (pkt.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:protractor"

\end_inset

).
 Jego zastosowanie jest rekomendowane dla aplikacji webowych wykorzystujących
 AngularJS.
 Zbadanie danych wysyłanych i odbieranych przez maszyny testowe umożliwił
 analizator protokołów sieciowych Wireshark 
\begin_inset CommandInset citation
LatexCommand cite
key "wireshark"

\end_inset

.
 
\end_layout

\begin_layout Standard
Wdrożenie systemu komunikatora było możliwe dzięki zastosowaniu platformy
 chmurowej Heroku (pkt.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:heroku"

\end_inset

).
\end_layout

\begin_layout Subsection
AngularJS
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:AngularJS"

\end_inset


\end_layout

\begin_layout Standard
AngularJS 
\begin_inset CommandInset citation
LatexCommand cite
key "angularjs"

\end_inset

 to projekt na licencji MIT, rozwijany głównie przez firmę Google.
 Framework ten umożliwia tworzenie i rozwój aplikacji internetowych typu
 Single Page Application.
 Znacznym ułatwieniem podczas projektowania i testowania aplikacji jest
 zastosowanie w AngularJS wzorca projektowego MVC (Model-View-Controller).
 Pozwala on między innymi na rozdzielenie warstw modelu (danych), widoku
 (prezentacji) i kontrolera (logiki), co z kolei przyczynia się do zwiększenia
 uporządkowania projektu.
 
\end_layout

\begin_layout Standard
Ponadto, użycie wzorca projektowego wstrzykiwania zależności (dependency
 injection) daje możliwość zastosowania po stronie klienta serwisów typowych
 dla aplikacji serwerowych.
 Jest to istotna cecha, ponieważ system komunikatora w znacznym stopniu
 polega na współpracy klientów (komunikacja P2P).
 Rola serwera powinna być w projekcie jak najmniejsza.
\end_layout

\begin_layout Standard
Jedną z najważniejszych funkcji AngularJS, redukującą ilość napisanego kodu,
 jest mechanizm dwukierunkowego wiązania danych (two-way data binding).
 Umożliwia on dynamiczną zmianę widoku na skutek modyfikacji danych w modelu.
 Wszelkie operacje na modelu przeprowadzane są w kontrolerze.
 Ponadto, zmiany widoku również mogą wpływać na model — dlatego wiązanie
 nazwane jest dwukierunkowym.
 
\end_layout

\begin_layout Subsection
Grunt, Bower, Yeoman
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:grunt bower yo"

\end_inset


\end_layout

\begin_layout Standard
Grunt 
\begin_inset CommandInset citation
LatexCommand cite
key "grunt"

\end_inset

 jest narzędziem automatyzującym powtarzalne czynności w trakcie projektowania
 aplikacji webowej.
 Narzędzie pozwala między innymi na przygotowanie ostatecznej wersji projektu,
 gotowej do wdrożenia na serwerze.
 
\end_layout

\begin_layout Standard
Kolejnym przydatnym narzędziem jest Bower 
\begin_inset CommandInset citation
LatexCommand cite
key "bower"

\end_inset

.
 Jest to menedżer umożliwiający definiowanie, jakie pakiety (biblioteki,
 moduły itp.) zostaną użyte w roboczej i docelowej wersji projektu.
 Bower automatycznie wyszukuje i instaluje określoną lub najnowszą wersję
 każdego uwzględnionego pakietu oraz sprawdza zależności między pakietami.
\end_layout

\begin_layout Standard
Yeoman 
\begin_inset CommandInset citation
LatexCommand cite
key "yeoman"

\end_inset

 to generator szkieletu projektu.
 Jest on używany jednorazowo na początku pracy i pozwala na stworzenie pierwszej
 wersji działającego systemu — podstawowej struktury katalogów projektu
 oraz niezbędnych plików.
 Dzięki temu programista może skupić się, w kolejnych krokach, jedynie na
 istotnych i unikalnych funkcjach systemu.
 
\end_layout

\begin_layout Subsection
Lodash
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:lodash"

\end_inset


\end_layout

\begin_layout Standard
Lodash 
\begin_inset CommandInset citation
LatexCommand cite
key "lodash"

\end_inset

 jest biblioteką udostępnioną na licencji MIT i dostarczającą programiście
 metody rozszerzające język JavaScript.
 Zastosowanie biblioteki w projekcie pozwala na przyspieszenie implementacji
 systemu poprzez skorzystanie z gotowych fragmentów kodu.
 Do dyspozycji są między innymi metody operujące na ciągach znaków, tablicach,
 obiektach i kolekcjach obiektów.
 W ramach biblioteki dostępne są również bardziej wydajne zamienniki funkcji
 obecnych w standardzie języka JavaScript — ich użycie pozwala na przyspieszenie
 działania projektowanej aplikacji.
 
\end_layout

\begin_layout Subsection
Node.js, Express
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:node"

\end_inset


\end_layout

\begin_layout Standard
Środowisko uruchomieniowe Node.js 
\begin_inset CommandInset citation
LatexCommand cite
key "node"

\end_inset

 służy do tworzenia skalowalnych aplikacji internetowych w języku JavaScript.
 W szczególności, umożliwia zaprojektowanie serwerów WWW.
 W niniejszym projekcie serwer Node.js (wraz z modułem Express 
\begin_inset CommandInset citation
LatexCommand cite
key "express"

\end_inset

) posłużył do udostępniania gotowego programu klienckiego — umożliwia przeglądar
kom pobranie aplikacji komunikatora.
 
\end_layout

\begin_layout Standard
Framework oraz moduły, które można użyć wraz z nim, są projektami open-source.
\end_layout

\begin_layout Standard
Npm 
\begin_inset CommandInset citation
LatexCommand cite
key "npm"

\end_inset

 jest domyślnym menedżerem pakietów dla platformy Node.js.
\end_layout

\begin_layout Subsection
Python Eve
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:py eve"

\end_inset


\end_layout

\begin_layout Standard
Do implementacji serwera REST w systemie komunikatora wykorzystano framework
 Python Eve 
\begin_inset CommandInset citation
LatexCommand cite
key "eve"

\end_inset

.
 Do głównych zalet tego narzędzia należy zaliczyć jego prostotę oraz przyjęcie
 pewnych konwencji — dzięki temu programista definiuje tylko niezbędne,
 unikalne dla danego programu elementy.
 W szczególności, rolą projektanta jest sprecyzowanie klas — określenie
 ich nazw i atrybutów.
 W przypadku systemu komunikatora są to klasy użytkownika (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:uzytkownicy i logowanie"

\end_inset

) i konwersacji (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Konwersacje"

\end_inset

).
 Dodatkowo, należy zdefiniować zależności pomiędzy klasami, ograniczenia
 integralnościowe dla poszczególnych atrybutów oraz podstawową konfigurację
 połączenia z bazą danych.
 Wiele zadań, które powtarzają się w projektach typowych serwerów REST,
 jest zapewnionych automatycznie przez framework — są to przykładowo: walidacja
 danych, przygotowanie ścieżek dostępu do obiektów poprzez protokół HTTP
 czy obsługa bazy danych.
 Wybór tej technologii wynika z faktu, iż serwer w systemie komunikatora
 pełni jedynie rolę typowego pośrednika aplikacji klienckich z bazą danych
 i nie wykonuje niestandardowych obliczeń (nietypowych dla serwera REST).
 Możliwości oferowane przez framework Python Eve okazały się wystarczające.
 System polega w większości na współpracy aplikacji klienckich.
 
\end_layout

\begin_layout Subsection
MongoDB
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:mongo"

\end_inset


\end_layout

\begin_layout Standard
MongoDB 
\begin_inset CommandInset citation
LatexCommand cite
key "mongo"

\end_inset

 jest systemem do zarządzania nierelacyjną bazą danych.
 Zastosowanie tej bazy danych w systemie komunikatora wynika wprost z faktu
 użycia frameworka Python Eve, który jest domyślnie przystosowany do współpracy
 z bazą danych MongoDB.
 Dane przechowywane są w niej w formie dokumentów JSON.
 Baza danych charakteryzuje się wysoką wydajnością i skalowalnością.
 Ponadto, jest to oprogramowanie open-source.
 
\end_layout

\begin_layout Standard
W celu uruchomienia publicznie dostępnej bazy danych skorzystano z mLab
 
\begin_inset CommandInset citation
LatexCommand cite
key "mlab"

\end_inset

.
 Jest to chmurowa platforma udostępniająca bazę danych jako serwis (DaaS,
 Database as a Service).
 
\end_layout

\begin_layout Subsection
Protractor
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:protractor"

\end_inset


\end_layout

\begin_layout Standard
Zalecanym frameworkiem testującym dla aplikacji napisanych przy użyciu AngularJS
 jest Protractor 
\begin_inset CommandInset citation
LatexCommand cite
key "protractor"

\end_inset

.
 Pozwala on na zdefiniowanie scenariuszy testowych oraz automatycznie przeprowad
zenie zaplanowanych testów.
 Możliwe jest również ustalanie parametrów testowych oraz warunków, w jakich
 poszczególne testy należy uznać za zakończone pomyślnie.
 Zastosowanie tej technologii umożliwiło zbadanie wydajności systemu komunikator
a w powtarzalny sposób.
 
\end_layout

\begin_layout Subsection
Heroku 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:heroku"

\end_inset


\end_layout

\begin_layout Standard
Heroku 
\begin_inset CommandInset citation
LatexCommand cite
key "heroku"

\end_inset

 to platforma chmurowa, działająca w modelu PaaS (Platform as a Service).
 Serwer REST oraz serwer aplikacji zostały umieszczone w wirtualnych środowiskac
h oferowanych przez tę usługę.
 Dzięki temu obie aplikacje są dostępne publicznie — posiadają publiczny
 adres IP oraz domenę internetową.
 Aplikacja kliencka może komunikować się z serwerem REST.
 Platforma Heroku umożliwia między innymi zarządzanie aplikacjami, wyłączanie
 ich, modyfikację ustawień oraz automatycznie buduje i uruchamia nową wersję
 oprogramowania po zaktualizowaniu jej kodu źródłowego w publicznym repozytorium
 kodu.
 
\end_layout

\begin_layout Section
Dalszy rozwój
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Dalszy rozwój"

\end_inset


\end_layout

\begin_layout Standard
Poniżej opisano pokrótce kilka idei rozwijających system komunikatora.
\end_layout

\begin_layout Subsection
Relacja znajomości
\end_layout

\begin_layout Standard
Zaimplementowanie relacji znajomości pomiędzy użytkownikami.
 Dzięki temu osoba tworząca konwersację będzie mogła od razu dopisać do
 niej uczestników wybierając ich z
\begin_inset space ~
\end_inset

listy swoich znajomych.
 Kwestią do rozstrzygnięcia pozostaje w
\begin_inset space ~
\end_inset

tej sytuacji wybranie, kto ma przypisać uczestnikom wartość user_dht_id
 (osoba tworząca konwersację czy każdy jej członek z
\begin_inset space ~
\end_inset

osobna).
\end_layout

\begin_layout Subsection
Spójność przyczynowa
\end_layout

\begin_layout Standard
Zagwarantowanie spójności przyczynowej wiadomości i
\begin_inset space ~
\end_inset

wyświetlanie komunikatów dopiero, gdy pobrane zostały wszystkie poprzednie.
 Obie własności spowodują bardziej realistyczne wrażenie prowadzenia rozmowy.
 Jeśli użytkownik wysłał wiadomość 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
b
\end_layout

\end_inset

 w
\begin_inset space ~
\end_inset

odpowiedzi na otrzymaną wiadomość a
\begin_inset space ~
\end_inset

to pojawią się one w
\begin_inset space ~
\end_inset

oknie rozmowy w
\begin_inset space ~
\end_inset

odpowiedniej kolejności — najpierw 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset

, potem 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
b
\end_layout

\end_inset

.
 Jest to możliwe do osiągnięcia, jeśli wiadomości będą zawierały zegar wektorowy
 z
\begin_inset space ~
\end_inset

wartościami ostatnio odebranych wiadomości.
\end_layout

\begin_layout Subsection
Szyfrowanie wiadomości
\end_layout

\begin_layout Standard
Sposoby implementacji oraz ich znane wady opisano w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Bezpieczeństwo, krypto, JS"

\end_inset

.
 Niemniej jednak ta własność jest niezbędna, by treść wiadomości nie mogła
 zostać odczytana przez osoby niepowołane (użytkowników nie należących do
 danej konwersacji).
 
\end_layout

\begin_layout Subsection
Dostarczanie wiadomości
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:dostarczanie wiadomości offline propozycja"

\end_inset


\end_layout

\begin_layout Standard
Zagwarantowanie dostarczenia wiadomości w
\begin_inset space ~
\end_inset

sytuacji, gdy użytkownik uruchamia aplikację i
\begin_inset space ~
\end_inset

żaden z
\begin_inset space ~
\end_inset

uczestników konwersacji nie jest dostępny.
 Problem ten może zostać rozwiązany na przykład poprzez dodanie do konwersacji
 serwera jako uczestnika.
 Serwer ten wykonywałby taki sam kod programu jak inni klienci, ale nie
 miałby możliwości odszyfrowywania wiadomości ani nadawania własnych komunikatów.
 Alternatywnym sposobem rozwiązania problemu byłoby powierzenie przekazywania
 wiadomości programom należącym do znajomych użytkowników.
 Oni również nie mieliby możliwości odczytania i
\begin_inset space ~
\end_inset

modyfikacji treści wiadomości.
 
\end_layout

\begin_layout Subsection
Lista info hashy zamiast pojedynczych wartości
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:lista IH zamiast pojedynczych wartości"

\end_inset


\end_layout

\begin_layout Standard
Przechowywanie listy ostatnich wartości info hash w
\begin_inset space ~
\end_inset

DHT (zamiast pojedynczej wartości) oraz przesyłanie jej w
\begin_inset space ~
\end_inset

strukturze wiadomości (również zamiast pojedynczej wartości previousInfoHash).
 Dzięki temu możliwe byłoby równoległe pobieranie wiadomości przez dołączających
 klientów.
 Ponadto, to rozwiązanie pozwala na zmniejszenie skali problemu nadpisywania
 wartości w
\begin_inset space ~
\end_inset

DHT — jeśli użytkownik wysyła wiadomości w
\begin_inset space ~
\end_inset

szybkim tempie, to możliwe jest nadpisanie wartości info hash w
\begin_inset space ~
\end_inset

DHT, zanim ktokolwiek zdąży ją odczytać.
\end_layout

\begin_layout Subsection
Zmiana zawartości torrenta bez zmiany info hasha
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:zmiana zawartości bez zmiany IH"

\end_inset


\end_layout

\begin_layout Standard
Modyfikacja protokołu BitTorrent pozwalająca na ponowne wykorzystanie istniejący
ch swarmów, ponieważ konieczność dołączania do nowego swarmu dla każdej
 wysłanej wiadomości powoduje duży narzut komunikacyjny wynikający z
\begin_inset space ~
\end_inset

nawiązywania połączenia pomiędzy peerami.
 Z
\begin_inset space ~
\end_inset

dużym prawdopodobieństwem w
\begin_inset space ~
\end_inset

nowych swarmach znajdą się te same peery, które uczestniczyły w
\begin_inset space ~
\end_inset

udostępnianiu poprzednich wiadomości.
 Alternatywnym sposobem rozwiązania tego problemu jest możliwość dodawania
 nowych plików do istniejącego torrenta bez zmiany wartości info hash —
 istnieją propozycje wprowadzenia takiej modyfikacji protokołu 
\begin_inset CommandInset citation
LatexCommand cite
key "bep39-bt,bep46-bt"

\end_inset

.
 Klient dołącza wtedy do tylu swarmów, ilu jest uczestników rozmowy i
\begin_inset space ~
\end_inset

nie opuszcza ich aż do momentu, w
\begin_inset space ~
\end_inset

którym użytkownik zdecyduje o
\begin_inset space ~
\end_inset

wyłączeniu aplikacji.
 Każda wiadomość byłaby wtedy nowym plikiem w
\begin_inset space ~
\end_inset

tym samym, istniejącym już torrencie.
 Zaletą wynikającą z
\begin_inset space ~
\end_inset

omówionej modyfikacji jest znaczne zmniejszenie liczby swarmów, w
\begin_inset space ~
\end_inset

których klient musi się jednocześnie znajdować.
 Dodatkowo, w
\begin_inset space ~
\end_inset

drugim rozwiązaniu możliwe byłoby zrezygnowanie z
\begin_inset space ~
\end_inset

algorytmu ZLT oraz wyeliminowanie ponownego wysyłania tych samych wiadomości
 w
\begin_inset space ~
\end_inset

torrentach kontrolnych.
\end_layout

\begin_layout Subsection
Wysyłanie plików (zdjęć, filmów)
\end_layout

\begin_layout Standard
Komunikatory wymienione w
\begin_inset space ~
\end_inset

rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:istniejace rozwiazania"

\end_inset

 posiadają możliwość wysyłania różnych plików jako załączniki lub jako osobne
 wiadomości.
 Ponadto, częstą praktyką w popularnych komunikatorach jest umieszczanie
 w aplikacji wbudowanych obrazów wyrażających określone emocje, które użytkownik
 może przeszukiwać i wysyłać.
 
\end_layout

\begin_layout Chapter
Wyniki testów
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap:Wyniki testów"

\end_inset


\end_layout

\begin_layout Standard
Po zakończeniu prac nad systemem komunikatora przeprowadzono serię testów
 mających na celu zbadanie wydajności aplikacji.
 W
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Kryteria"

\end_inset

 przedstawiono parametry, w
\begin_inset space ~
\end_inset

przypadku których zmiana wartości mogłaby wpłynąć na wydajność aplikacji.
 W
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Scenariusze testowe"

\end_inset

 przybliżono scenariusze testowe, a
\begin_inset space ~
\end_inset

w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:specyfikacja"

\end_inset

 opisano specyfikację maszyn testowych.
 W
\begin_inset space ~
\end_inset

dalszej części znajdują się szczegółowe opisy poszczególnych testów oraz
 wnioski, które z
\begin_inset space ~
\end_inset

nich wynikają.
\end_layout

\begin_layout Section
Kryteria 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Kryteria"

\end_inset


\end_layout

\begin_layout Standard
Wymienione poniżej parametry umożliwiają symulację różnych sytuacji podczas
 testów.
 Zmiana ich wartości może pozytywnie lub negatywnie wpływać na wydajność
 aplikacji.
 Pod uwagę wzięto następujące kryteria:
\end_layout

\begin_layout Enumerate
rozmiar wiadomości,
\end_layout

\begin_layout Enumerate
liczba uruchomionych klientów (dostępnych użytkowników) oraz liczba klientów
 wysyłających wiadomości,
\end_layout

\begin_layout Enumerate
liczba wiadomości w
\begin_inset space ~
\end_inset

konwersacji,
\end_layout

\begin_layout Enumerate
liczba wiadomości, która zostaje umieszczona w
\begin_inset space ~
\end_inset

torrencie kontrolnym,
\end_layout

\begin_layout Enumerate
sposób podłączenia klientów do sieci — czy klienty znajdują się w
\begin_inset space ~
\end_inset

jednej lub różnych podsieciach oraz czy jest to sieć domowa, czy laboratoryjna,
\end_layout

\begin_layout Enumerate
zbadanie, czy uruchomienie w
\begin_inset space ~
\end_inset

jednej sieci wielu klientów obsługujących różne konwersacje wpływa na wydajność.
 
\end_layout

\begin_layout Section
Scenariusze testowe
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Scenariusze testowe"

\end_inset


\end_layout

\begin_layout Standard
Zaproponowano następujące scenariusze:
\end_layout

\begin_layout Enumerate
Jeden nadawca wysyła wszystkie wiadomości bez czekania na odpowiedzi — zmierzono
 czas otrzymania przez wszystkich odbiorców pełnej listy wiadomości.
 
\end_layout

\begin_layout Enumerate
Jeden nadawca 
\begin_inset Formula $U_{N}$
\end_inset

 wysyła wiadomość 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
m
\end_layout

\end_inset

 i
\begin_inset space ~
\end_inset

czeka na odpowiedzi od wszystkich odbiorców.
 Odpowiedzi są wysyłane natychmiast po otrzymaniu wiadomości 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
m
\end_layout

\end_inset

.
 Zmierzono czas otrzymania poszczególnych odpowiedzi przez nadawcę 
\begin_inset Formula $U_{N}$
\end_inset

 od momentu nadania wiadomości 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
m
\end_layout

\end_inset

.
 Scenariusz ma symulować naturalną rozmowę, w
\begin_inset space ~
\end_inset

której uczestnicy odpowiadają na otrzymaną wiadomość dopiero, gdy ją otrzymają.
 Pomiar czasu zaczyna się w
\begin_inset space ~
\end_inset

momencie wysłania wiadomości przez nadawcę 
\begin_inset Formula $U_{N}$
\end_inset

, a
\begin_inset space ~
\end_inset

kończy się w
\begin_inset space ~
\end_inset

momencie otrzymania przez nadawcę 
\begin_inset Formula $U_{N}$
\end_inset

 odpowiedzi od danego odbiorcy (dla każdego odbiorcy z
\begin_inset space ~
\end_inset

osobna).
 Czas przesłania wiadomości w
\begin_inset space ~
\end_inset

jedną stronę jest (uśredniając) połową uzyskanego wyniku.
 Nadawca 
\begin_inset Formula $U_{N}$
\end_inset

 wyśle kolejną wiadomość dopiero po otrzymaniu wszystkich odpowiedzi.
 
\end_layout

\begin_layout Enumerate
Jeden klient dołącza do konwersacji.
 Zmierzono czas otrzymania pełnej listy wiadomości przez dołączającego klienta.
\end_layout

\begin_layout Section
Specyfikacja komputerów i
\begin_inset space ~
\end_inset

środowiska testowe
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:specyfikacja"

\end_inset


\end_layout

\begin_layout Standard
Część testów przeprowadzono w
\begin_inset space ~
\end_inset

laboratorium wyposażonym w
\begin_inset space ~
\end_inset

komputery stacjonarne posiadające adresy IP w
\begin_inset space ~
\end_inset

tej samej podsieci — komputer tego typu będzie dalej oznaczony jako K1.
 Dodatkowo, w
\begin_inset space ~
\end_inset

powyższych testach wykorzystano komputer podłączony do odrębnej podsieci
 (nazwany dalej K2).
 Druga część testów została przeprowadzona na komputerach podłączonych do
 jednej sieci domowej — w
\begin_inset space ~
\end_inset

tych testach wykorzystano komputer K3 oraz komputer K4.
 Podział testów na części przeprowadzane w
\begin_inset space ~
\end_inset

różnych środowiskach pozwolił na zwiększenie różnorodności konfiguracji
 oraz zaobserwowanie zjawisk, które występują w
\begin_inset space ~
\end_inset

jednym ze środowisk, a
\begin_inset space ~
\end_inset

nie zachodzą w
\begin_inset space ~
\end_inset

drugim — szczegóły zostały opisane w
\begin_inset space ~
\end_inset

dalszej części rozdziału.
\end_layout

\begin_layout Standard
Specyfikacja komputerów K1 w
\begin_inset space ~
\end_inset

laboratorium jest następująca:
\end_layout

\begin_layout Itemize
procesor 8 rdzeniowy,
\end_layout

\begin_layout Itemize
32 GB pamięci RAM,
\end_layout

\begin_layout Itemize
system operacyjny Linux (OpenSUSE 42.1), 
\end_layout

\begin_layout Itemize
przeglądarka Google Chrome (wersja 56), 
\end_layout

\begin_layout Itemize
prędkość łącza w
\begin_inset space ~
\end_inset

laboratorium: pobieranie 400 Mbps, wysyłanie 200 Mbps (komputery w
\begin_inset space ~
\end_inset

laboratorium posiadają adresy IP w
\begin_inset space ~
\end_inset

tej samej podsieci).
 
\end_layout

\begin_layout Standard
Specyfikacja komputera K2 (w laboratorium) oraz K3 (w sieci domowej):
\end_layout

\begin_layout Itemize
procesor 4 rdzeniowy,
\end_layout

\begin_layout Itemize
8 GB pamięci RAM,
\end_layout

\begin_layout Itemize
system operacyjny Linux (Ubuntu 16.04),
\end_layout

\begin_layout Itemize
przeglądarka Google Chrome (wersja 59) + przeglądarka Opera (wersja 45)
 (symulowanie 2 klientów na jednej maszynie, jeśli testy odbywały się w
\begin_inset space ~
\end_inset

sieci domowej)
\end_layout

\begin_layout Itemize
prędkość łącza w
\begin_inset space ~
\end_inset

laboratorium (K2): pobieranie 400 Mbps, wysyłanie 200 Mbps,
\end_layout

\begin_layout Itemize
prędkość łącza w
\begin_inset space ~
\end_inset

sieci domowej (K3): pobieranie 6 Mbps, wysyłanie 1 Mbps.
\end_layout

\begin_layout Standard
Specyfikacja komputera K4:
\end_layout

\begin_layout Itemize
procesor 4 rdzeniowy,
\end_layout

\begin_layout Itemize
8 GB pamięci RAM,
\end_layout

\begin_layout Itemize
system operacyjny Windows 7,
\end_layout

\begin_layout Itemize
przeglądarka Google Chrome (wersja 59) + przeglądarka Opera (wersja 45)
 (symulowanie 2 klientów na jednej maszynie)
\end_layout

\begin_layout Itemize
prędkość łącza w
\begin_inset space ~
\end_inset

sieci domowej: pobieranie 6 Mbps, wysyłanie 1 Mbps.
\end_layout

\begin_layout Section
Wysłanie pojedynczej wiadomości
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Wysłanie pojed wiad"

\end_inset


\end_layout

\begin_layout Standard
Celem testu było sprawdzenie czasu przesłania pojedynczej wiadomości od
 nadawcy do odbiorcy (scenariusz 1).
 Wynik stanowi punkt odniesienia dla kolejnych testów, w
\begin_inset space ~
\end_inset

których wysyłana jest większa liczba wiadomości w
\begin_inset space ~
\end_inset

różnych konfiguracjach testowanych kryteriów.
 
\end_layout

\begin_layout Standard
Pomiar czasu rozpoczynał się w
\begin_inset space ~
\end_inset

momencie nadania wiadomości, a
\begin_inset space ~
\end_inset

kończył dla każdego odbiorcy z
\begin_inset space ~
\end_inset

osobna w
\begin_inset space ~
\end_inset

momencie odebrania przez niego wiadomości.
 W
\begin_inset space ~
\end_inset

ramach pojedynczego testu pomiar został uśredniony.
 Otrzymane czasy zostały zaprezentowane na wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Czas-odebrania-pojedynczej"

\end_inset

.
 Na osi poziomej oznaczono liczbę klientów uruchomionych w
\begin_inset space ~
\end_inset

trakcie testu — jeden z
\begin_inset space ~
\end_inset

nich jest nadawcą, a
\begin_inset space ~
\end_inset

pozostali odbiorcami.
 Na osi pionowej znajduje się średni czas odebrania wiadomości przez poszczególn
ych odbiorców.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/1 wiadomość.png
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Czas odebrania pojedynczej wiadomości w
\begin_inset space ~
\end_inset

zależności o
\begin_inset space ~
\end_inset

liczby klientów
\begin_inset CommandInset label
LatexCommand label
name "fig:Czas-odebrania-pojedynczej"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Najniższy czas dostarczenia notowany jest w
\begin_inset space ~
\end_inset

sieci domowej (K3 <> K4).
 Na komputerach K3 i
\begin_inset space ~
\end_inset

K4 były uruchomione 1 lub 2 klienty (w osobnych oknach przeglądarki) — stąd
 możliwość przetestowania od 2 do 4 klientów.
 Średni czas wynosi od około 2
\begin_inset space ~
\end_inset

sekund dla 2 klientów do 7
\begin_inset space ~
\end_inset

sekund dla 4 klientów, jednakże szczegółowe pomiary wykazały znaczne odchyły
 od średniej — minimalny czas wyniósł ok.
 0,5
\begin_inset space ~
\end_inset

sekundy, podczas gdy maksymalny mógł wynieść nawet 30
\begin_inset space ~
\end_inset

sekund.
 Na czas przesyłu ma wpływ między innymi częstotliwość sprawdzania wartości
 info hash w
\begin_inset space ~
\end_inset

DHT — domyślnie są to 2
\begin_inset space ~
\end_inset

sekundy.
 Jeśli odbiorca sprawdzi wartość tuż przed ustawieniem nowej wartości przez
 nadawcę to dowie się o
\begin_inset space ~
\end_inset

nowej wiadomości dopiero przy kolejnym sprawdzeniu.
 
\end_layout

\begin_layout Standard
Średnio 10-11
\begin_inset space ~
\end_inset

sekund trwa przesyłanie wiadomości pomiędzy komputerami K1 (K1 <> K1).
 Czas nie ulega zmianie, gdy wiadomość odbierana jest przez większą liczbę
 klientów.
 
\end_layout

\begin_layout Standard
Najdłużej wiadomość była przesyłana między komputerami K2 i
\begin_inset space ~
\end_inset

K1 (K2 <> K1).
 Minimalny czas odebrania wiadomości wyniósł około 50
\begin_inset space ~
\end_inset

sekund, a
\begin_inset space ~
\end_inset

średni był niewiele wyższy — około 51
\begin_inset space ~
\end_inset

sekund.
 Na bazie logów aplikacji zaobserwowano, że komunikaty charakterystyczne
 dla protokołu BitTorrent (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:jak-komunikuja"

\end_inset

) pojawiają się dopiero po upłynięciu minimalnego czasu (50
\begin_inset space ~
\end_inset

sekund) — następuje wtedy nawiązanie połączenia pomiędzy klientami.
 
\end_layout

\begin_layout Standard
Wyniki testu wskazują na jeszcze jedną zależność — przesłanie wiadomości
 w
\begin_inset space ~
\end_inset

sieci lokalnej (czy to laboratoryjnej, czy domowej) trwa krócej niż przesłanie
 pomiędzy komputerami znajdującymi się w
\begin_inset space ~
\end_inset

różnych podsieciach.
 
\end_layout

\begin_layout Section
Wpływ rozmiaru wiadomości
\end_layout

\begin_layout Standard
Nie zaobserwowano istotnego wzrostu czasu przesyłania wiadomości w
\begin_inset space ~
\end_inset

zależności od długości tekstu będącego treścią komunikatu.
 
\end_layout

\begin_layout Section
Wysyłanie i
\begin_inset space ~
\end_inset

oczekiwanie na odpowiedź
\end_layout

\begin_layout Standard
Bardziej rozbudowanym testem, w
\begin_inset space ~
\end_inset

porównaniu do przedstawionego w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Wysłanie pojed wiad"

\end_inset

, jest scenariusz 2.
 Polega on na wysłaniu wiadomości i
\begin_inset space ~
\end_inset

czekaniu na odpowiedzi od wszystkich uczestników rozmowy lub wybranej podgrupy.
 W
\begin_inset space ~
\end_inset

drugim przypadku pozostałe klienty mają za zadanie jedynie bierne odbieranie
 i
\begin_inset space ~
\end_inset

przekazywanie komunikatów.
 
\end_layout

\begin_layout Standard
Wykres 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Uśredniony-czas-przesłania"

\end_inset

 przedstawia wyniki 4 powtórzeń testu w
\begin_inset space ~
\end_inset

sieci domowej.
 Wykres 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Uśredniony-czas-przesłania-1"

\end_inset

 prezentuje uśrednione wyniki wspomnianych testów.
 Testy przeprowadzono na 2 komputerach K3 i
\begin_inset space ~
\end_inset

K4 (w sieci domowej).
 W
\begin_inset space ~
\end_inset

testach brały udział 2 klienty — nadawca (wysyła wiadomość i
\begin_inset space ~
\end_inset

czeka na odpowiedź) oraz odbiorca (czeka na wiadomość i
\begin_inset space ~
\end_inset

natychmiast na nią odpowiada).
 Na osi poziomej zaznaczono liczbę wiadomości wysłanych przez nadawcę w
\begin_inset space ~
\end_inset

ramach testu, a
\begin_inset space ~
\end_inset

na osi pionowej czas przesłania pojedynczego komunikatu pomiędzy komputerami.
 Pomiar czasu w
\begin_inset space ~
\end_inset

scenariuszu 2 obejmuje przesłanie wszystkich wiadomości w
\begin_inset space ~
\end_inset

danej iteracji (wiadomość od nadawcy i
\begin_inset space ~
\end_inset

wszystkie odpowiedzi), ale czas przedstawiony na wykresie jest średnią czasów
 przesyłu — w
\begin_inset space ~
\end_inset

tym wypadku średnią czasów przesłania 2 wiadomości.
\end_layout

\begin_layout Standard
Zachowano domyślną liczbę wiadomości umieszczanych w
\begin_inset space ~
\end_inset

torrencie kontrolnym — 5.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/4 testy 30 wyslij i odpowiedz.png
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Czas przesłania wiadomości w
\begin_inset space ~
\end_inset

sieci domowej
\begin_inset CommandInset label
LatexCommand label
name "fig:Uśredniony-czas-przesłania"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/4 testy 30 wyslij i odpowiedz średnia.png
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Uśredniony czas przesłania wiadomości w
\begin_inset space ~
\end_inset

sieci domowej
\begin_inset CommandInset label
LatexCommand label
name "fig:Uśredniony-czas-przesłania-1"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Czas przesłania pojedynczej wiadomości wyniósł minimalnie około 2
\begin_inset space ~
\end_inset

sekund (czyli podobnie jak w
\begin_inset space ~
\end_inset

przypadku punktu 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Wysłanie pojed wiad"

\end_inset

), a
\begin_inset space ~
\end_inset

maksymalnie sięga nawet 90
\begin_inset space ~
\end_inset

sekund.
\end_layout

\begin_layout Standard
Przede wszystkim należy zwrócić uwagę na nieregularne występowanie pogorszeń
 wydajności (dłuższych czasów przesyłu wiadomości) — wykres 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Uśredniony-czas-przesłania"

\end_inset

.
 Zdarza się, że w
\begin_inset space ~
\end_inset

danej iteracji w
\begin_inset space ~
\end_inset

jednym teście czas jest znacznie gorszy niż w
\begin_inset space ~
\end_inset

przypadku pozostałych testów.
 Co więcej, spadki wydajności wydają się być niezależne od zastosowanego
 algorytmu zmniejszania liczby wiadomości — nie występują jedynie w
\begin_inset space ~
\end_inset

momentach, kiedy liczba torrentów jest najwyższa, czyli tuż przed uruchomieniem
 algorytmu zmniejszającego ich liczbę.
 Można również zaobserwować niespodziewane pogorszenie wydajności tuż po
 zmniejszeniu liczby torrentów (na przykład dla 16 wiadomości).
 Niemniej jednak, ten algorytm jest niezbędny, co zostanie pokazane w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Wpływ alg"

\end_inset

.
 
\end_layout

\begin_layout Standard
Nieregularność można po części wytłumaczyć relatywnie niską prędkością łącza
 sieciowego.
 W
\begin_inset space ~
\end_inset

trakcie testów zaobserwowano błędy połączeń z
\begin_inset space ~
\end_inset

trackerem lub DHT — przekroczenie maksymalnego czasu nawiązywania połączenia.
 Zbadano zatem liczbę pakietów wysyłanych i
\begin_inset space ~
\end_inset

odbieranych przez komputery K3 i
\begin_inset space ~
\end_inset

K4 w
\begin_inset space ~
\end_inset

ciągu minuty w
\begin_inset space ~
\end_inset

następujących sytuacjach: 
\end_layout

\begin_layout Itemize
Klienty wyłączone — punkt odniesienia dla dalszych badań,
\end_layout

\begin_layout Itemize
Bezczynność — klienty są włączone, ale nie są przesyłane żadne torrenty,
\end_layout

\begin_layout Itemize
Klienty przesyłają zmienną liczbę torrentów (od 1 do 20).
\end_layout

\begin_layout Standard
Wyniki przedstawione zostały w
\begin_inset space ~
\end_inset

tabeli 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Statystyka-połączeń"

\end_inset

 oraz na wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Statystyka-połączeń"

\end_inset

.
 Oprócz liczby połączeń w
\begin_inset space ~
\end_inset

ciągu minuty (
\begin_inset Quotes pld
\end_inset

Łącznie
\begin_inset Quotes prd
\end_inset

), w
\begin_inset space ~
\end_inset

tabeli przedstawiono procentowy i
\begin_inset space ~
\end_inset

ilościowy udział pakietów protokołu STUN.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Statystyka połączeń
\begin_inset CommandInset label
LatexCommand label
name "tab:Statystyka-połączeń"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="9">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kl.
 wyłączone
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bezczynność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Łącznie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
230
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
300
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1050
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1800
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3840
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7380
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11200
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
% STUN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
57%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
70%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
76%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
80%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
83%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
87%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
STUN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
598
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1260
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2918
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5904
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9296
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14790
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/torrenty pakiety.png
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Statystyka połączeń
\begin_inset CommandInset label
LatexCommand label
name "fig:Statystyka-połączeń"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Jak wynika z
\begin_inset space ~
\end_inset

przeprowadzonego doświadczenia, zdecydowaną większość wysłanych i
\begin_inset space ~
\end_inset

odebranych pakietów stanowią pakiety protokołu STUN, który odpowiedzialny
 jest za odszukiwanie adresów IP komputerów znajdujących się w
\begin_inset space ~
\end_inset

sieciach stosujących translację adresów.
 Łączna liczba pakietów jest znacznie wyższa niż podczas próby kontrolnej
 z
\begin_inset space ~
\end_inset

wyłączonymi klientami lub z
\begin_inset space ~
\end_inset

klientami w
\begin_inset space ~
\end_inset

stanie bezczynności.
 
\end_layout

\begin_layout Standard
W sieci laboratoryjnej, pomiędzy komputerami K1, czas przesyłu wiadomości
 był bardziej stabilny.
 Dla 2-4 klientów czas przesłania wiadomości pozostawał stabilny (nieco
 ponad 50
\begin_inset space ~
\end_inset

sekund) niezależnie od liczby wysłanych wiadomości.
 Dla większej liczby klientów zaobserwowano spadki wydajności.
 Ta kwestia została poruszona w
\begin_inset space ~
\end_inset

kolejnym punkcie (
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Wpływ alg"

\end_inset

).
\end_layout

\begin_layout Section
Wpływ algorytmu ZLT na wydajność
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Wpływ alg"

\end_inset


\end_layout

\begin_layout Standard
W celu sprawdzenia, czy algorytm zmniejszający liczbę torrentów (algorytm
 ZLT, opisany w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Wysyłanie wiadomości"

\end_inset

) jest niezbędny i
\begin_inset space ~
\end_inset

spełnia swoją rolę, wykonano następujące testy:
\end_layout

\begin_layout Enumerate
Zbadanie maksymalnej liczby torrentów, które jednocześnie może obsłużyć
 klient.
 Dokonano tego przy pomocy testu polegającego na wysyłaniu wiadomości i
\begin_inset space ~
\end_inset

odbieraniu odpowiedzi (scenariusz 2) z
\begin_inset space ~
\end_inset

wyłączonym algorytmem ZLT — każda wiadomość stawała się nowym torrentem.
 Zmieniano przy tym liczbę klientów uczestniczących w
\begin_inset space ~
\end_inset

rozmowie (aktywnie i
\begin_inset space ~
\end_inset

biernie).
\end_layout

\begin_layout Enumerate
Zbadanie scenariusza 2 z
\begin_inset space ~
\end_inset

włączonym algorytmem ZLT.
 
\end_layout

\begin_layout Standard
Testy przeprowadzono w
\begin_inset space ~
\end_inset

laboratorium.
 W
\begin_inset space ~
\end_inset

pierwszym teście uczestniczyły jedynie komputery K1 ze względu na potrzebę
 utrzymania spójnych parametrów maszyn.
 Wynik tego testu zaprezentowano na wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Zależność-czasu-przesyłu"

\end_inset

.
 Na osi poziomej zaznaczono liczbę torrentów, którą w
\begin_inset space ~
\end_inset

danym momencie obsługiwał każdy klient, a
\begin_inset space ~
\end_inset

na osi poziomej znajduje się średni czas przesyłu wiadomości pomiędzy klientami.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/bez kompaktowania.png
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Zależność czasu przesyłu od liczby torrentów
\begin_inset CommandInset label
LatexCommand label
name "fig:Zależność-czasu-przesyłu"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dla przypomnienia: minimalny czas wysłania pojedynczej wiadomości pomiędzy
 komputerami K1 wynosi 10
\begin_inset space ~
\end_inset

s (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Wysłanie pojed wiad"

\end_inset

).
 Zaobserwowano niewielki wzrost czasu przesyłu wiadomości wraz ze wzrostem
 liczby torrentów aż do osiągnięcia liczby około 60-70 torrentów.
 W
\begin_inset space ~
\end_inset

tym momencie na wszystkich maszynach następowało zatrzymanie pracy aplikacji.
 Oznacza to, że aplikacje mogą obsłużyć maksymalnie około 60-70 torrentów
 i
\begin_inset space ~
\end_inset

nie należy przekraczać tej wartości.
 
\end_layout

\begin_layout Standard
W trakcie testu badano również wykorzystanie zasobów komputera.
 Podczas normalnej pracy aplikacji zużycie pamięci RAM oscyluje w
\begin_inset space ~
\end_inset

granicach 200-400
\begin_inset space ~
\end_inset

MB, a
\begin_inset space ~
\end_inset

tuż przed błędnym zatrzymaniem pracy aplikacji zużycie wynosiło ponad 600
\begin_inset space ~
\end_inset

MB.
 
\end_layout

\begin_layout Standard
Przeprowadzenie testu 1 potwierdziło słuszność decyzji o
\begin_inset space ~
\end_inset

zaimplementowaniu algorytmu ZLT.
 Dodatkowym potwierdzeniem stały się wyniki drugiego testu.
 Zostały one przedstawione na wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Działanie-algorytmu-zmniejszając"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/kompaktowanie.png
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Działanie algorytmu ZLT
\begin_inset CommandInset label
LatexCommand label
name "fig:Działanie-algorytmu-zmniejszając"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Na osi poziomej znajduje się liczba wiadomości wysłanych przez nadawcę,
 a
\begin_inset space ~
\end_inset

na pionowej — czas przesyłu.
 Zachowano domyślną liczbę wiadomości umieszczanych w
\begin_inset space ~
\end_inset

torrencie kontrolnym — 5.
 W
\begin_inset space ~
\end_inset

drugim teście uczestniczyły komputery K1 oraz komputer K2, który był nadawcą
 
\begin_inset Formula $U_{N}$
\end_inset

 w
\begin_inset space ~
\end_inset

scenariuszu 2.
\end_layout

\begin_layout Standard
Minimalny czas przesyłu wiadomości zgadza się z
\begin_inset space ~
\end_inset

wynikiem uzyskanym w
\begin_inset space ~
\end_inset

teście z
\begin_inset space ~
\end_inset

punktu 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Wysłanie pojed wiad"

\end_inset

 — 50
\begin_inset space ~
\end_inset

sekund.
 Wyniki na wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Działanie-algorytmu-zmniejszając"

\end_inset

 zostały uśrednione — w
\begin_inset space ~
\end_inset

testach brała udział różna liczba odbiorców.
 Można zaobserwować spadek wydajności w
\begin_inset space ~
\end_inset

miarę zbliżania do momentu, w
\begin_inset space ~
\end_inset

którym algorytm zmniejsza liczbę torrentów, po czym następuje wzrost wydajności
 (zmniejszenie czasu przesyłu).
\end_layout

\begin_layout Standard
Należy dodać, że symulowana rozmowa nie odzwierciedla idealnie prawdziwej
 sytuacji, w
\begin_inset space ~
\end_inset

której użytkownicy mogą nie odpowiedzieć na jakąś wiadomość, lub odpowiedzieć
 poprzez wysłanie większej liczby wiadomości.
 W
\begin_inset space ~
\end_inset

tej sytuacji algorytm ZLT może zmniejszać liczbę torrentów różnym użytkownikom
 w
\begin_inset space ~
\end_inset

różnych momentach i
\begin_inset space ~
\end_inset

uzyskane czasy przesyłu wiadomości zostaną uśrednione.
\end_layout

\begin_layout Section
Wpływ liczby wiadomości w
\begin_inset space ~
\end_inset

algorytmie ZLT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:wpływ liczby wiad w zlt"

\end_inset


\end_layout

\begin_layout Standard
Kolejnym kryterium, które wzięto pod uwagę podczas testów była liczba wiadomości
, które algorytm ZLT umieszcza w
\begin_inset space ~
\end_inset

torrencie kontrolnym (liczba ta będzie dalej nazywana 
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
zmienną X
\end_layout

\end_inset

).
 Algorytm okazuje się niezbędny, ponieważ nadmierna liczba torrentów, które
 w
\begin_inset space ~
\end_inset

danym momencie udostępnia klient, może spowodować jego błędne zatrzymanie.
 
\end_layout

\begin_layout Standard
Im mniejsza wartość zmiennej X, tym częściej algorytm wykonuje zamianę wielu
 torrentów na pojedynczy kontrolny.
 Skrajnym przypadkiem jest umieszczanie każdej nowej wiadomości razem ze
 wszystkimi poprzednimi w
\begin_inset space ~
\end_inset

nowym torrencie i
\begin_inset space ~
\end_inset

usunięcie poprzedniego torrenta.
 W
\begin_inset space ~
\end_inset

takiej sytuacji liczba torrentów utrzymywanych przez każdego klienta byłaby
 równa liczbie uczestników rozmowy.
 Jednakże, każda operacja zamiany wielu torrentów na pojedynczy wymaga pewnego
 nakładu pracy, a
\begin_inset space ~
\end_inset

w
\begin_inset space ~
\end_inset

opisanym przypadku koszt osiągnąłby wartość maksymalną.
 Dodatkowo, istnieje narzut komunikacyjny spowodowany przesyłaniem tych
 samych wiadomości ponownie w
\begin_inset space ~
\end_inset

połączonym torrencie.
 
\end_layout

\begin_layout Standard
Im wyższa wartość zmiennej X, tym wyższa jest maksymalna liczba torrentów,
 które klient będzie musiał utrzymywać z
\begin_inset space ~
\end_inset

powodu rzadziej następującej zamiany.
 
\end_layout

\begin_layout Standard
Wykresy 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Liczba-wysłanych-wiadomości"

\end_inset

 i
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Liczba-wykonań-algorytmu"

\end_inset

 przedstawiają zależności pewnych parametrów względem różnych wartości zmiennej
 X.
 Oba wykresy bazują na 100 powtórzeniach wysłania wiadomości (100 iteracji).
 Pierwszy wykres przedstawia, ile faktycznie wiadomości wyśle klient — w
\begin_inset space ~
\end_inset

wynikach uwzględniono też powtórzone wiadomości, które zostały wysłane wcześniej
, a
\begin_inset space ~
\end_inset

znalazły się ponownie w
\begin_inset space ~
\end_inset

nowym torrencie kontrolnym.
 Drugi wykres pokazuje: ile razy algorytm ZLT stworzył nowy torrent (
\begin_inset Quotes pld
\end_inset

Wykonania
\begin_inset Quotes prd
\end_inset

) oraz jaka jest maksymalna liczba torrentów zaobserwowana w
\begin_inset space ~
\end_inset

trakcie 100 iteracji.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/liczba wyslanych wiad od X.png
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Liczba wysłanych wiadomości
\begin_inset CommandInset label
LatexCommand label
name "fig:Liczba-wysłanych-wiadomości"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/wykonania i l torr od x.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Liczba wykonań algorytmu i
\begin_inset space ~
\end_inset

maksymalna liczba torrentów
\begin_inset CommandInset label
LatexCommand label
name "fig:Liczba-wykonań-algorytmu"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Z pierwszego wykresu wynika, że optymalna wartość zmiennej X wynosi 6 lub
 8 — dla tych wartości zmiennej X liczba wysłanych wiadomości jest najmniejsza.
 Zbadano również, że wraz ze wzrostem liczby iteracji (więcej niż 100) optimum
 na pierwszym wykresie przesuwa się w
\begin_inset space ~
\end_inset

stronę wyższej wartości X.
 Należy jednak pamiętać, że w
\begin_inset space ~
\end_inset

teście 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Wpływ alg"

\end_inset

 (a konkretnie próbie z
\begin_inset space ~
\end_inset

wyłączonym algorytmem ZLT) wykazano, iż maksymalna liczba torrentów, jakie
 może obsłużyć aplikacja wynosi około 60-70.
 Konieczne jest zatem minimalizowanie liczby jednocześnie uruchomionych
 torrentów.
 
\end_layout

\begin_layout Standard
Dodatkowo, każdy użytkownik, który aktywnie udziela się w
\begin_inset space ~
\end_inset

rozmowie, powoduje wzrost liczby uruchomionych torrentów, które wszystkie
 klienty w
\begin_inset space ~
\end_inset

konwersacji muszą obsłużyć.
 Przedstawione na wykresie wartości dotyczą pojedynczego użytkownika.
 Gdyby, przykładowo, uczestników było dwóch, maksymalna liczba torrentów
 podwaja się, w
\begin_inset space ~
\end_inset

przypadku 3 uczestników — potraja, itd.
 Można więc zauważyć, że przyjmując wartość zmiennej X równą 10, możliwe
 jest przekroczenie 60 obsługiwanych torrentów przy 4 uczestnikach rozmowy.
\end_layout

\begin_layout Section
Pobieranie listy wiadomości
\end_layout

\begin_layout Standard
Ostatni test korzysta ze scenariusza 3.
 Jego celem jest pomiar czasu potrzebnego na pobranie pełnej listy wiadomości
 przez użytkownika dołączającego do trwającej rozmowy.
 Istotnymi kryteriami w
\begin_inset space ~
\end_inset

tym teście są: liczba wiadomości do pobrania oraz zastosowana wartość zmiennej
 X w
\begin_inset space ~
\end_inset

algorytmie ZLT.
 Wyniki przeprowadzonych doświadczeń nie odbiegają od oczekiwań i
\begin_inset space ~
\end_inset

rezultatów poprzednich testów.
 
\end_layout

\begin_layout Standard
Przede wszystkim, przy wyłączonym algorytmie ZLT konieczne byłoby pobieranie
 każdej wiadomości z
\begin_inset space ~
\end_inset

osobna, jedna po drugiej, dlatego całkowity czas pobrania wynosiłby 
\begin_inset Formula $n\cdotp V$
\end_inset

, gdzie 
\begin_inset Formula $n$
\end_inset

 oznacza liczbę wiadomości do pobrania, a
\begin_inset space ~
\end_inset


\begin_inset Formula $V$
\end_inset

 — średni czas przesłania wiadomości w
\begin_inset space ~
\end_inset

danym środowisku testowym.
 Włączenie algorytmu pozwala na znaczne skrócenie całkowitego czasu.
 
\end_layout

\begin_layout Standard
Czas ten można by jeszcze przyspieszyć, gdyby w
\begin_inset space ~
\end_inset

aplikacji zaimplementowany został mechanizm przechowywania list ostatnich
 wartości info hash (zamiast pojedynczych wartości) w
\begin_inset space ~
\end_inset

DHT oraz strukturze komunikatu (wspomniany w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lista IH zamiast pojedynczych wartości"

\end_inset

).
 W
\begin_inset space ~
\end_inset

takiej sytuacji część wiadomości mogłaby być pobierana równolegle.
\end_layout

\begin_layout Standard
Bez wspomnianego mechanizmu, czasy pobierania wiadomości w
\begin_inset space ~
\end_inset

sieci laboratoryjnej pomiędzy komputerami K1 są dłuższe i
\begin_inset space ~
\end_inset

zostały przedstawione na wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Pobieranie-listy-wiadomości"

\end_inset

.
 Liczba komputerów biorących udział w
\begin_inset space ~
\end_inset

teście miała marginalne znaczenie.
 Każdy punkt oznacza czas pobrania danej liczby wiadomości w
\begin_inset space ~
\end_inset

zależności od wartości zmiennej X ustawionej w
\begin_inset space ~
\end_inset

algorytmie ZLT.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/pobieranie listy.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Pobieranie listy wiadomości o
\begin_inset space ~
\end_inset

różnej długości
\begin_inset CommandInset label
LatexCommand label
name "fig:Pobieranie-listy-wiadomości"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Można zaobserwować, że czas pobierania listy wiadomości jest tym dłuższy,
 im więcej komunikatów zostało wysłanych od momentu utworzenia ostatniego
 torrenta kontrolnego przez algorytm ZLT.
 Ponadto, dla wyższych wartości zmiennej X istnieje możliwość większego
 oddalenia się od wspomnianego torrenta.
 Przykładowo, dla zmiennej X równej 9 prawdopodobieństwo, że konieczne będzie
 pobranie więcej niż 3 wiadomości zanim pobrany zostanie torrent kontrolny
 wynosi 63%, natomiast dla zmiennej X równej 3 — 0%.
 Takie samo prawdopodobieństwo występuje na kolejnych poziomach algorytmu.
 
\end_layout

\begin_layout Section
Wpływ jednoczesnych konwersacji na wydajność
\end_layout

\begin_layout Standard
W sieci domowej prędkości pobierania i
\begin_inset space ~
\end_inset

wysyłania danych są znacznie mniejsze niż w
\begin_inset space ~
\end_inset

sieci laboratoryjnej.
 W
\begin_inset space ~
\end_inset

celu sprawdzenia, czy większa liczba konwersacji wpływa na pogorszenie wydajnośc
i, uruchomiono 4 klienty aplikacji na komputerach K3 i
\begin_inset space ~
\end_inset

K4.
 Zaobserwowano porównywalne pogorszenie wydajności aplikacji zarówno gdy
 klienty prowadzą wspólną konwersację oraz gdy klienty prowadzą 2 konwersacje
 parami.
 Oznacza to, że w
\begin_inset space ~
\end_inset

wolniejszych sieciach większy wpływ na wydajność ma liczba włączonych klientów
 niż to, w
\begin_inset space ~
\end_inset

jaki sposób są one połączone (kto rozmawia z
\begin_inset space ~
\end_inset

kim).
 
\end_layout

\begin_layout Standard
W sieci laboratoryjnej test przeprowadzono na komputerach K1.
 Nie zaobserwowano istotnej różnicy w
\begin_inset space ~
\end_inset

czasie przesłania wiadomości w
\begin_inset space ~
\end_inset

zależności od tego, czy klienty prowadzą wspólną rozmowę, czy kilka osobnych.
 
\end_layout

\begin_layout Section
Podsumowanie testów
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Podsumowanie testów"

\end_inset


\end_layout

\begin_layout Standard
Z wyników testów oraz doświadczeń z
\begin_inset space ~
\end_inset

innymi aplikacjami wykorzystującymi protokół BitTorrent można wywnioskować,
 że protokół znacznie lepiej sprawdza się w
\begin_inset space ~
\end_inset

przypadku, gdy klient pobiera lub udostępnia niewielką liczbę torrentów.
 Jednakże, pojedynczy torrent może i
\begin_inset space ~
\end_inset

powinien zawierać możliwie dużo plików o
\begin_inset space ~
\end_inset

jak największym rozmiarze — wtedy jednorazowe, dość kosztowne komunikacyjnie
 dołączenie do swarmu pozwala na pobranie dużej ilości danych.
 Należy więc minimalizować liczbę jednocześnie pobieranych torrentów, a
\begin_inset space ~
\end_inset

maksymalizować rozmiar lub liczbę plików pobieranych w
\begin_inset space ~
\end_inset

ramach każdego z
\begin_inset space ~
\end_inset

nich.
 
\end_layout

\begin_layout Chapter
Podsumowanie
\end_layout

\begin_layout Standard
Podsumowując dotychczasowe rozważania i
\begin_inset space ~
\end_inset

wyniki testów należy przede wszystkim zwrócić uwagę na fakt, że zakładany
 sposób funkcjonowania systemu okazał się możliwy do osiągnięcia w
\begin_inset space ~
\end_inset

praktyce po drobnych modyfikacjach.
 Komunikator umożliwia użytkownikom prowadzenie rozmów, a
\begin_inset space ~
\end_inset

wiadomości są przekazywane wprost pomiędzy klientami, bez pośrednictwa serwerów.
 Wprowadzono również algorytm ZLT (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Wysyłanie wiadomości"

\end_inset

) oraz usuwanie torrentów starszych niż tydzień (punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Udostępnianie starych torr"

\end_inset

) — funkcje mające na celu poprawę wydajności aplikacji.
 
\end_layout

\begin_layout Standard
Niestety, testy wykazały, że czasy przesyłu wiadomości należałoby w
\begin_inset space ~
\end_inset

dalszym ciągu znacząco poprawić.
 W
\begin_inset space ~
\end_inset

rozwiązaniach scentralizowanych oraz w
\begin_inset space ~
\end_inset

założeniach dowolnego komunikatora dąży się do osiągnięcia czasu przesłania
 komunikatu bliskiego zero (rozmowy w
\begin_inset space ~
\end_inset

czasie rzeczywistym).
 W
\begin_inset space ~
\end_inset

przypadku komunikatora będącego przedmiotem niniejszej pracy, czas przesłania
 komunikatu w
\begin_inset space ~
\end_inset

najbardziej sprzyjających warunkach wyniósł około 0,5
\begin_inset space ~
\end_inset

sekundy, ale notowano też przypadki wielokrotnie dłuższego oczekiwania na
 dostarczenie.
 W
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Dalszy rozwój"

\end_inset

 zaproponowano rozwiązania mogące pozytywnie wpłynąć na wydajność systemu,
 a
\begin_inset space ~
\end_inset

których z
\begin_inset space ~
\end_inset

różnych względów nie umieszczono w
\begin_inset space ~
\end_inset

projekcie.
 Zrezygnowano chociażby z
\begin_inset space ~
\end_inset

wdrożenia szyfrowania wiadomości, a
\begin_inset space ~
\end_inset

powody szerzej opisano w
\begin_inset space ~
\end_inset

punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Bezpieczeństwo, krypto, JS"

\end_inset

.
\end_layout

\begin_layout Standard
Wykorzystanie protokołu BitTorrent umożliwiło skupienie się na implementacji
 kluczowych funkcji systemu, logiki aplikacji.
 Skomunikowanie klientów ze sobą było zadaniem protokołu.
 Dzięki temu rozwój aplikacji był znacznie szybszy, w
\begin_inset space ~
\end_inset

porównaniu do sytuacji, w
\begin_inset space ~
\end_inset

której należałoby zadbać również o
\begin_inset space ~
\end_inset

ten aspekt.
 Jednakże, w
\begin_inset space ~
\end_inset

ramach przyszłego rozwoju aplikacji, należałoby wprowadzić pewne zmiany
 w
\begin_inset space ~
\end_inset

protokole — mowa o
\begin_inset space ~
\end_inset

nich w
\begin_inset space ~
\end_inset

punktach 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:zmiana zawartości bez zmiany IH"

\end_inset

 oraz 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Podsumowanie testów"

\end_inset

.
 
\end_layout

\begin_layout Standard
Niniejsza praca magisterska może być traktowana jako źródło cennych informacji
 związanych z
\begin_inset space ~
\end_inset

protokołem BitTorrent oraz implementacją systemu rozproszonego komunikatora
 internetowego.
 W
\begin_inset space ~
\end_inset

szczególności, może posłużyć do ponownego przemyślenia pewnych kwestii i
\begin_inset space ~
\end_inset

wdrożenia kolejnej wersji komunikatora pozbawionego poznanych dotychczas
 wad.
 Autor pracy ma nadzieję, że zalety architektury rozproszonej pozwolą na
 ostateczne opracowanie komunikatora mogącego realnie konkurować z
\begin_inset space ~
\end_inset

istniejącymi, scentralizowanymi produktami.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\begin_layout Plain Layout
więcej artykułów, można wymieniać strony (zakres lub napisać ile stron ma
 całość), opisać że coś jest raportem technicznym (jeśli faktycznie jest)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\start_of_appendix

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
backmatter
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "IM 1"

\end_inset

Rebecca E.
 Grinter, Leysia Palen, 
\begin_inset Quotes pld
\end_inset

Instant Messaging in Teen Life
\begin_inset Quotes prd
\end_inset

, University of Colorado, 2002, strony 21-22
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "IM 2"

\end_inset

Jure Leskovec, Eric Horvitz, 
\begin_inset Quotes pld
\end_inset

Planetary-Scale Views on a Large Instant-Messaging Network
\begin_inset Quotes prd
\end_inset

, Microsoft Research, 2008, strony 1-2
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "IM 3"

\end_inset

Anabel Quan-Haase, Alyson L.
 Young, 
\begin_inset Quotes pld
\end_inset

Uses and Gratifications of Social Media: A Comparison of Facebook and Instant
 Messaging
\begin_inset Quotes prd
\end_inset

, Bulletin of Science Technology & Society, 2010, strony 350-352
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "fb-personalizowane reklamy"

\end_inset

https://www.facebook.com/help/568137493302217
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "messenger"

\end_inset

https://pl-pl.messenger.com/ (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "messenger uzytkownicy"

\end_inset

https://messenger.fb.com/?ref=platform (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "messenger-encryption"

\end_inset

https://www.facebook.com/help/messenger-app/811527538946901?helpref=uf_permalink
 (dostęp 13.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bleep"

\end_inset

http://www.bleep.pm/ (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bleep how it works"

\end_inset

http://blog.bittorrent.com/2014/07/30/building-an-engine-for-decentralized-communi
cations/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "signal"

\end_inset

https://whispersystems.org/ (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "signal artykuł"

\end_inset

Katriel Cohn-Gordon, Cas Cremers, Luke Garratt i inni, 
\begin_inset Quotes pld
\end_inset

A Formal Security Analysis of the Signal Messaging Protocol
\begin_inset Quotes prd
\end_inset

, University of Oxford, 2016, https://eprint.iacr.org/2016/1013.pdf (dostęp
 11.07.2017) 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "wire"

\end_inset

https://wire.com/en/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "wire privacy rep"

\end_inset


\begin_inset Quotes pld
\end_inset

Wire Privacy Whitepaper
\begin_inset Quotes prd
\end_inset

, Wire Swiss GmbH, 2017, https://wire.com/resource/Wire%20Privacy%20Whitepaper/do
wnload/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "wire security rep"

\end_inset


\begin_inset Quotes pld
\end_inset

Wire Security Whitepaper
\begin_inset Quotes prd
\end_inset

, Wire Swiss GmbH, 2017, https://wire.com/resource/Wire%20Security%20Whitepaper/d
ownload/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "telegram"

\end_inset

https://telegram.org/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "telegram protokół"

\end_inset

https://core.telegram.org/mtproto (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "allo"

\end_inset

https://allo.google.com/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "whatsapp"

\end_inset

https://www.whatsapp.com/ (dostęp 27.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "whatsapp whitepaper"

\end_inset


\begin_inset Quotes pld
\end_inset

WhatsApp Encryption Overview, Technical white paper
\begin_inset Quotes prd
\end_inset

, WhatsApp, 2017, https://www.whatsapp.com/security/WhatsApp-Security-Whitepaper.pd
f (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "darkwire"

\end_inset

https://darkwire.io/ (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "darkwire git"

\end_inset

https://github.com/seripap/darkwire.io (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "friends"

\end_inset

http://moose-team.github.io/friends/ (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "merkle"

\end_inset

Becker, Georg, 
\begin_inset Quotes pld
\end_inset

Merkle Signature Schemes, Merkle Trees and Their Cryptanalysis".
 Ruhr-Universität Bochum, 2008, http://www.emsec.rub.de/media/crypto/attachments/fi
les/2011/04/becker_1.pdf (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "tox"

\end_inset

https://tox.chat/ (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "tox faq"

\end_inset

https://tox.chat/faq.html#techfaq (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "zeronet"

\end_inset

https://zeronet.readthedocs.io/en/latest/using_zeronet/sample_sites/ (dostęp
 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bitmessage-main"

\end_inset

https://bitmessage.org/wiki/Main_Page (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bitmessage-pdf"

\end_inset

Jonathan Warren, 
\begin_inset Quotes pld
\end_inset

Bitmessage: A Peer-to-Peer Message Authentication and Delivery System
\begin_inset Quotes prd
\end_inset

, 2012, https://bitmessage.org/bitmessage.pdf (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "email-liczba"

\end_inset


\begin_inset Quotes pld
\end_inset

Email Statistics Report, 2017-2021
\begin_inset Quotes prd
\end_inset

, THE RADICATI GROUP, INC., http://www.radicati.com/wp/wp-content/uploads/2017/01/E
mail-Statistics-Report-2017-2021-Executive-Summary.pdf (dostęp 12.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bittorrent"

\end_inset

http://www.bittorrent.org/ (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "magnet link"

\end_inset

http://bittorrent.org/beps/bep_0009.html (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "magnet uri scheme"

\end_inset

http://magnet-uri.sourceforge.net/ (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "webtorrent"

\end_inset

https://webtorrent.io/ (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "webrtc"

\end_inset

https://webrtc.org/ (dostęp 27.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "python-eve"

\end_inset

http://python-eve.org/ (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bep39-bt"

\end_inset

http://www.bittorrent.org/beps/bep_0039.html (dostęp 28.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bep46-bt"

\end_inset

http://www.bittorrent.org/beps/bep_0046.html (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bep46-wt"

\end_inset

https://github.com/webtorrent/webtorrent/issues/886 (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "kademlia-dht"

\end_inset

https://github.com/jeanlauliac/kademlia-dht (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "kadtools"

\end_inset

https://github.com/kadtools/kad (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "web cryptography api"

\end_inset

https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "darkwire szyfrowanie how it works"

\end_inset

https://github.com/seripap/darkwire.io#how-it-works (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "signal double ratchet"

\end_inset

Trevor Perrin, Moxie Marlinspike, 
\begin_inset Quotes pld
\end_inset

The Double Ratchet Algorithm
\begin_inset Quotes prd
\end_inset

, 2016, https://whispersystems.org/docs/specifications/doubleratchet/doubleratche
t.pdf (dostęp 13.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bleep forward secrecy"

\end_inset

http://engineering.bittorrent.com/2014/12/11/authentication-and-forward-secrecy-in
-bleep/ (dostęp 14.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bleep forward secrecy offline"

\end_inset

http://engineering.bittorrent.com/2015/08/06/forward-secrecy-for-offline-messages-
in-bleep/ (dostęp 14.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "webCrypto API w3"

\end_inset

https://www.w3.org/TR/WebCryptoAPI/ (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "webCrypto-experimental "

\end_inset

https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API (dostęp 09.06.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "wireshark"

\end_inset

https://www.wireshark.org/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "angularjs"

\end_inset

https://angularjs.org/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "grunt"

\end_inset

https://gruntjs.com/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bower"

\end_inset

https://bower.io/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "yeoman"

\end_inset

http://yeoman.io/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "lodash"

\end_inset

https://lodash.com/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "node"

\end_inset

https://nodejs.org/en/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "express"

\end_inset

https://expressjs.com/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "npm"

\end_inset

https://www.npmjs.com/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "eve"

\end_inset

http://python-eve.org/index.html (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "mongo"

\end_inset

https://www.mongodb.com/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "mlab"

\end_inset

https://mlab.com/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "protractor"

\end_inset

http://www.protractortest.org/ (dostęp 11.07.2017)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "heroku"

\end_inset

https://www.heroku.com/ (dostęp 11.07.2017)
\end_layout

\end_body
\end_document
