#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ../../texmf/tex/latex/commonstuff/dcsbook
\begin_preamble
%
%  $Id: thesis-template.lyx,v 1.7 2011/12/22 12:10:18 sobaniec Exp $
%
\end_preamble
\options thesis,openany
\use_default_options false
\begin_modules
dcs
\end_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbph
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "urlcolor=linkcolor,linkcolor=linkcolor,citecolor=linkcolor"
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indeks
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Author
Filip Waligórski
\end_layout

\begin_layout Title
Rozgłaszanie danych w
\begin_inset space ~
\end_inset

grafach dużej skali
\end_layout

\begin_layout Date
Poznań, 2017
\end_layout

\begin_layout Supervisor
dr Anna Kobusińska
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Subtitle
Bachelor's Thesis
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frontmatter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mainmatter
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Wstęp
\end_layout

\begin_layout Chapter
Istniejące rozwiązania
\end_layout

\begin_layout Standard
W tym rozdziale zaprezentowano istniejące komunikatory dla dwóch osób oraz
 komunikatory grupowe.
 Ich cele i
\begin_inset space ~
\end_inset

funkcjonalność są zbliżone choć realizują je z
\begin_inset space ~
\end_inset

różnymi założeniami oraz bazując na różnych architekturach i
\begin_inset space ~
\end_inset

koncepcjach.
 Poniżej opisane zostały wybrane rozwiązania z
\begin_inset space ~
\end_inset

naciskiem na cechy wyróżniające je spośród konkurencyjnych aplikacji.
 
\end_layout

\begin_layout Section
Facebook Messenger 
\begin_inset CommandInset citation
LatexCommand cite
key "messenger"

\end_inset


\end_layout

\begin_layout Standard
Jest to jeden z
\begin_inset space ~
\end_inset

najpopularniejszych obecnie komunikatorów.
 Oferuje zarówno czat dla 2 osób jak i
\begin_inset space ~
\end_inset

grupowy.
 Wspiera wysyłanie wszelkich multimediów i
\begin_inset space ~
\end_inset

plików oraz dostarczanie wiadomości pod nieobecność nadawcy.
 Dostępny jest na najszerszej gamie platform — jako aplikacja webowa, mobilna
 oraz desktopowa, czym wyróżnia się na tle konkurencji.
 Architektonicznie Messenger polega na 
\begin_inset Quotes pld
\end_inset

centralnym serwerze
\begin_inset Quotes prd
\end_inset

 przekazującym wiadomości.
 Cudzysłów wynika z
\begin_inset space ~
\end_inset

faktu, że pod pojęciem 
\begin_inset Quotes pld
\end_inset

serwer
\begin_inset Quotes prd
\end_inset

 kryje się ogromna infrastruktura złożona z
\begin_inset space ~
\end_inset

wielu maszyn, którą firma musi utrzymywać.
 Wadami tego komunikatora jest choćby brak wsparcia szyfrowania wiadomości
 czy fakt, że nie jest to oprogramowanie open-source.
 
\end_layout

\begin_layout Section
Bleep 
\begin_inset CommandInset citation
LatexCommand cite
key "bleep"

\end_inset


\end_layout

\begin_layout Standard
Bleep jest komunikatorem zaprojektowanym przez firmę rozwijającą protokół
 BitTorrent.
 Do dyspozycji użytkowników oddano aplikację mobilną oraz aplikację desktopową
 (brak aplikacji webowej).
 Kod źródłowy aplikacji nie został udostępniony (nie jest to open-source),
 co oznacza, że użytkownicy nie mogą upewnić się, czy aplikacja działa i
\begin_inset space ~
\end_inset

została zaimplementowana zgodnie z
\begin_inset space ~
\end_inset

założeniami.
 Bleep oferuje rozmowy dla dwóch osób, a
\begin_inset space ~
\end_inset

w
\begin_inset space ~
\end_inset

planach twórców jest zaimplementowanie komunikacji grupowej.
 Wiadomości są szyfrowane przed wysłaniem na urządzeniu nadawcy i
\begin_inset space ~
\end_inset

odszyfrowywane na urządzeniu odbiorcy — szyfrowanie end to end.
 
\end_layout

\begin_layout Standard
Jednak najważniejszą cechą wyróżniającą ten komunikator jest jego architektura
 - brak centralnego serwera pośredniczącego w
\begin_inset space ~
\end_inset

przekazywaniu wiadomości.
 Komunikaty przesyłane są bezpośrednio między urządzeniami, jeśli oba są
 dostępne w
\begin_inset space ~
\end_inset

momencie wysyłania, a
\begin_inset space ~
\end_inset

w
\begin_inset space ~
\end_inset

przeciwnym przypadku wiadomość umieszczana jest w
\begin_inset space ~
\end_inset

DHT (Distributed Hash Table) i
\begin_inset space ~
\end_inset

przechowywana do czasu odebrania jej.
 Specjalny mechanizm dba o
\begin_inset space ~
\end_inset

to, by wiadomość nie zniknęła z
\begin_inset space ~
\end_inset

DHT wcześniej.
 Dane o
\begin_inset space ~
\end_inset

koncie użytkownika oraz klucze szyfrujące pozostają lokalnie na urządzeniu.
 
\end_layout

\begin_layout Section
Signal 
\begin_inset CommandInset citation
LatexCommand cite
key "signal"

\end_inset


\end_layout

\begin_layout Standard
Twórcy aplikacji Signal skupili się przede wszystkim na bezpieczeństwie
 i
\begin_inset space ~
\end_inset

prywatności użytkowników.
 Wiadomości są szyfrowane na urządzeniach więc pomimo faktu, że architektura
 zakłada obecność centralnego serwera, wiadomości przechowywane na nim nie
 mogą zostać odczytane przez osoby trzecie.
 Kod źródłowy jest dostępny publicznie co oznacza, że każdy może sprawdzić
 zgodność implementacji z
\begin_inset space ~
\end_inset

oferowanymi założeniami.
 Podobnie jak w
\begin_inset space ~
\end_inset

przypadku aplikacji Bleep, dostępne są natywne aplikacje mobilna i
\begin_inset space ~
\end_inset

desktopowa.
 Możliwe jest prowadzenie rozmowy grupowej pomimo zastosowania szyfrowania
 wiadomości — treść zostaje zaszyfrowana symetrycznie (jedna wersja dla
 wszystkich odbiorców niezależnie od ich liczby), a
\begin_inset space ~
\end_inset

następnie sam klucz jest szyfrowany zgodnie z
\begin_inset space ~
\end_inset

oczekiwaniami każdego z
\begin_inset space ~
\end_inset

odbiorców z
\begin_inset space ~
\end_inset

osobna.
 Dzięki temu mechanizmowi uniknięto sytuacji, w
\begin_inset space ~
\end_inset

której nadawca musiałby przygotować 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
n
\end_layout

\end_inset

 wersji całej, potencjalnie dużej wiadomości dla 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
n
\end_layout

\end_inset

 odbiorców.
\end_layout

\begin_layout Standard
Podobne rozwiązania: Wire, WhatsApp, Telegram, Allo
\end_layout

\begin_layout Section
Darkwire 
\begin_inset CommandInset citation
LatexCommand cite
key "darkwire"

\end_inset


\end_layout

\begin_layout Standard
Darkwire to aplikacja open-source oferująca komunikator grupowy z
\begin_inset space ~
\end_inset

dostępem poprzez stronę internetową (aplikacja webowa).
 W przeciwieństwie do większości rozwiązań użytkownik nie musi tworzyć konta
 by skorzystać z
\begin_inset space ~
\end_inset

programu.
 W celu skomunikowania się z
\begin_inset space ~
\end_inset

użytkownikami należy wymienić między nimi identyfikator czatu (link do konkretne
go pokoju) za pośrednictwem innego kanału komunikacyjnego (np.
 e-mail).
 Takie rozwiązanie zakłada, że identyfikator nie zostanie odgadnięty przez
 osoby trzecie — w
\begin_inset space ~
\end_inset

przeciwnym przypadku będą one mogły odczytać wysyłane wiadomości.
 Architektura zakłada istnienie centralnego serwera uczestniczącego w
\begin_inset space ~
\end_inset

przekazywaniu wiadomości.
 Z racji faktu, że aplikacja ma otwarte źródła, każdy może uruchomić swój
 własny serwer.
 Komunikaty są szyfrowane na urządzeniu (w
\begin_inset space ~
\end_inset

przeglądarce) przed wysłaniem, zatem serwer nie zna treści wiadomości.
 Centralny serwer przesyła wiadomości tylko do tych uczestników, którzy
 są dostępni w
\begin_inset space ~
\end_inset

momencie nadania wiadomości (brak wsparcia dla odbierania starszych wiadomości
 czy wysyłania wiadomości do użytkowników niedostępnych w
\begin_inset space ~
\end_inset

danej chwili).
 
\end_layout

\begin_layout Section
Friends 
\begin_inset CommandInset citation
LatexCommand cite
key "friends"

\end_inset


\end_layout

\begin_layout Standard
Ten niszowy projekt open-source oferuje aplikację desktopową i
\begin_inset space ~
\end_inset

umożliwia czat grupowy.
 Szyfrowanie wiadomości nie zostało do tej pory zrealizowane, ale jest jednym
 z
\begin_inset space ~
\end_inset

punktów przyszłego rozwoju.
 Głównym celem twórców było stworzenie programu niezależnego od centralnego
 serwera oraz umożliwiającego rozmowę przy użyciu alternatywnych kanałów
 komunikacyjnych (np.
 poprzez Bluetooth) w
\begin_inset space ~
\end_inset

sytuacji gdy połączenie internetowe jest niedostępne.
 Aplikacja wykorzystuje algorytm plotkowania (gossiping) oraz replikuje
 wiadomości przy użyciu drzewa skrótów (hash tree, Merkle DAG, DAG - Directed
 Acyclic Graph).
 Dzięki temu wiadomości w
\begin_inset space ~
\end_inset

czacie mogą zostać połączone nawet w
\begin_inset space ~
\end_inset

przypadku, gdy ktoś nadał komunikaty będąc odłączonym od sieci — mechanizm
 podobny do łączenia zmian w
\begin_inset space ~
\end_inset

repozytorium kodu.
 Gwarantuje to ostateczną spójność — przykładowy scenariusz dla 3 użytkowników:
 
\end_layout

\begin_layout Enumerate
Wiadomość wysłana przez użytkownika A została odebrana przez użytkownika
 B, który dołączył ją do swojego drzewa wiadomości.
 
\end_layout

\begin_layout Enumerate
Użytkownik A stał się niedostępny.
 
\end_layout

\begin_layout Enumerate
Użytkownik C stał się dostępny i
\begin_inset space ~
\end_inset

odebrał od użytkownika B zmienioną wersję drzewa i
\begin_inset space ~
\end_inset

w
\begin_inset space ~
\end_inset

ten sposób dowiedział się o
\begin_inset space ~
\end_inset

wiadomości wysłanej przez użytkownika A pomimo faktu, że ten jest w
\begin_inset space ~
\end_inset

tej chwili niedostępny.
 
\end_layout

\begin_layout Section
Tox 
\begin_inset CommandInset citation
LatexCommand cite
key "tox"

\end_inset


\end_layout

\begin_layout Standard
Tox jest z
\begin_inset space ~
\end_inset

założenia rozproszonym i
\begin_inset space ~
\end_inset

szyfrowanym protokołem do wymiany wiadomości.
 Powstało kilkanaście implementacji klientów obsługujących go co pozwala
 na komunikowanie się z
\begin_inset space ~
\end_inset

użytkownikami różnych aplikacji.
 Wśród zaimplementowanych aplikacji są programy na komputery stacjonarne
 oraz smartfony.
 Wiadomości są przesyłane bezpośrednio między nadawcą i
\begin_inset space ~
\end_inset

odbiorcą dlatego obie strony muszą być dostępne jednocześnie.
 Brak wsparcia dostarczania wiadomości gdy jedna strona jest niedostępna
 to duża wada wszystkich aplikacji implementujących ten rodzaj transmisji
 P2P.
 Jednym z
\begin_inset space ~
\end_inset

rozwiązań tego problemu zaproponowanym przez twórców protokołu jest skorzystanie
 z
\begin_inset space ~
\end_inset

serwerów, którym użytkownik ufa i
\begin_inset space ~
\end_inset

których zadaniem jest przekazywanie wiadomości do odbiorcy pod nieobecność
 nadawcy.
 Narusza to jednak założenie o
\begin_inset space ~
\end_inset

rozproszeniu systemu (braku centralnych węzłów).
 Wsparcie dla komunikacji grupowej jest jednym z
\begin_inset space ~
\end_inset

celów rozwoju protokołu.
 
\end_layout

\begin_layout Section
ZeroChat, ZeroMail, BitMessage 
\begin_inset CommandInset citation
LatexCommand cite
key "zeronet"

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "bitmessage-main"

\end_inset


\end_layout

\begin_layout Standard
Przytoczone aplikacje realizują pomysły na komunikatory oparte o
\begin_inset space ~
\end_inset

mechanizm podobny do transakcji kryptowalutowych.
 Wysłanie wiadomości wymaga obliczenia funkcji skrótu z
\begin_inset space ~
\end_inset

zadanym prefiksem (proof of work) i
\begin_inset space ~
\end_inset

umieszczenia bloku w
\begin_inset space ~
\end_inset

łańcuchu (blockchain).
 Samo tylko wyliczenie funkcji skrótu powinno z
\begin_inset space ~
\end_inset

definicji zająć około 4 minut 
\begin_inset CommandInset citation
LatexCommand cite
key "bitmessage-pdf"

\end_inset

, podczas gdy pozostałe komunikatory dążą do uzyskania czasu dostarczenia
 wiadomości bliskiego zeru (rozmowa w
\begin_inset space ~
\end_inset

czasie rzeczywistym).
 Mimo tej znaczącej wady należy potraktować te projekty jako próbę stworzenia
 rozwiązania o
\begin_inset space ~
\end_inset

innej architekturze niż dotychczas zaprezentowane (centralny serwer lub
 P2P).
 Być może w
\begin_inset space ~
\end_inset

przyszłości wady uda się zminimalizować, a
\begin_inset space ~
\end_inset

zalety architektury opartej o
\begin_inset space ~
\end_inset

blockchain okażą się kluczowe.
 
\end_layout

\begin_layout Chapter
Koncepcja
\end_layout

\begin_layout Standard
W niniejszym rozdziale opisano technologie i protokoły wykorzystane do opracowan
ia koncepcji i implementacji rozproszonego komunikatora grupowego.
 Konkretnie, są to: protokół BitTorrent przedstawiony w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:bittorent"

\end_inset

 oraz jego implementacja w języku JavaScript — WebTorrent — punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:webtorrent"

\end_inset

.
 
\end_layout

\begin_layout Section
BitTorrent 
\begin_inset CommandInset citation
LatexCommand cite
key "bittorrent"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:bittorent"

\end_inset


\end_layout

\begin_layout Standard
BitTorrent to protokół komunikacyjny pozwalający na wymianę i dystrybucję
 plików przez Internet.
 Jego główną zaletą jest podział plików na części i możliwość pobierania
 tych części od użytkowników, którzy w danym momencie również uczestniczą
 w procesie udostępniania.
 Pozwala to na znaczne odciążenie serwera.
 W szczególności możliwe jest nawet wyłączenie serwera, a plik pozostanie
 dostępny do pobrania, jeśli tylko wszystkie jego fragmenty zostały przed
 wyłączeniem rozesłane do zainteresowanych komputerów (wystarczy, że jedna
 maszyna posiada daną część i podzieli się nią z pozostałymi).
 
\end_layout

\begin_layout Subsection
Podstawowe pojęcia
\end_layout

\begin_layout Standard
Poniżej znajduje się lista najważniejszych pojęć związanych z protokołem
 wraz z krótkim wyjaśnieniem ich znaczenia:
\end_layout

\begin_layout Itemize
Torrent — plik lub zbiór plików udostępnionych do pobrania.
\end_layout

\begin_layout Itemize
metaplik .torrent (.torrent metafile) — dodatkowy plik z metadanymi dotyczącymi
 udostępnionych plików.
 Zawiera między innymi:
\end_layout

\begin_deeper
\begin_layout Itemize
nazwy i rozmiary plików, 
\end_layout

\begin_layout Itemize
liczbę i rozmiar fragmentów, na jakie zostały podzielone pliki, 
\end_layout

\begin_layout Itemize
listę skrótów SHA-1 fragmentów w celu weryfikacji poprawności,
\end_layout

\begin_layout Itemize
adresy URL trackerów.
\end_layout

\end_deeper
\begin_layout Itemize
piece, block — podczas przygotowywania torrenta pliki dzielone są na fragmenty
 (piece), a każdy taki fragment składa się z bloków (block).
 Blok jest najmniejszą jednostką, którą można przesłać przez sieć między
 użytkownikami.
 Aby udostępniać fragment użytkownik musi posiadać wszystkie jego bloki.
 
\end_layout

\begin_layout Itemize
info hash — 160-bitowa wartość będąca wynikiem funkcji skrótu SHA-1, której
 podawana jest część metapliku .torrent (nazwy plików i lista skrótów fragmentów).
 Info hash pozwala jednoznacznie zidentyfikować dany torrent.
 
\end_layout

\begin_layout Itemize
tracker — serwer, którego zadaniem jest przechowywanie adresów IP użytkowników
 pobierających dany torrent.
 Pozwala użytkownikom na znalezienie siebie nawzajem.
 
\end_layout

\begin_layout Itemize
klient (client) — program uruchomiony na komputerze użytkownika, który pozwala
 na pobieranie plików z wykorzystaniem protokołu BitTorrent.
\end_layout

\begin_layout Itemize
peer — węzeł (komputer, klient) pobierający i wysyłający fragmenty torrenta.
 Zazwyczaj nie posiada jeszcze wszystkich fragmentów.
\end_layout

\begin_layout Itemize
seed — peer posiadający wszystkie fragmenty.
 
\end_layout

\begin_layout Itemize
swarm — grupa peerów pobierających dany torrent.
\end_layout

\begin_layout Itemize
peer-to-peer (P2P) — sieć złożona z komputerów, które komunikują się ze
 sobą np.
 w celu wymiany plików.
 Peery tworzą sieć P2P.
\end_layout

\begin_layout Itemize
Distributed Hash Table (DHT) — rozproszona tablica mieszająca — sieć składająca
 się z węzłów, które umożliwiają zapisywanie i odczytywanie rekordów w formie
 klucz-wartość.
 Węzły dzielą między sobą zbiór wszystkich kluczy.
 W kontekście protokołu BitTorrent, DHT może zastąpić rolę trackera.
\end_layout

\begin_layout Itemize
magnet link — link pozwalający na uzyskanie metadanych torrenta bez konieczności
 pobierania metapliku .torrent.
 Link powinien zawierać przynajmniej info hash torrenta oraz listę trackerów.
\end_layout

\begin_layout Subsection
Scenariusz pobrania torrenta
\end_layout

\begin_layout Standard
W celu pobrania torrenta niezbędne są następujące czynności:
\end_layout

\begin_layout Enumerate
Pobranie metapliku .torrent lub poznanie (kliknięcie) magnet linku identyfikujące
go dany torrent.
 Zazwyczaj informacje te można uzyskać na stronach internetowych katalogujących
 istniejące torrenty (wyszukiwarkach torrentów).
\end_layout

\begin_layout Enumerate
Uzyskanie listy trackerów z metapliku lub magnet linka.
\end_layout

\begin_layout Enumerate
Pobranie z trackera listy peerów uczestniczących w udostępnianiu torrenta.
\end_layout

\begin_layout Enumerate
Pobranie fragmentów torrenta od peerów.
\end_layout

\begin_layout Subsection
Jak komunikują się peery
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:jak-komunikuja"

\end_inset


\end_layout

\begin_layout Standard
BitTorrent używa 12 typów wiadomości do prowadzenia komunikacji pomiędzy
 peerami:
\end_layout

\begin_layout Itemize
hand-shake — wiadomość rozpoczynająca połączenie,
\end_layout

\begin_layout Itemize
bitfield — wskazuje, jakie fragmenty posiada peer, 
\end_layout

\begin_layout Itemize
keep-alive — wiadomość podtrzymująca otwarte połączenie, 
\end_layout

\begin_layout Itemize
port — informuje o zmianie portu, 
\end_layout

\begin_layout Itemize
choke, unchoke, interested, not interested — 4 wiadomości informujące o
 zmianie stanu peera (związane z algorytmem z punktu 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:choking-alg"

\end_inset

), 
\end_layout

\begin_layout Itemize
have — wiadomość informująca o tym, że peer otrzymał nowy fragment, 
\end_layout

\begin_layout Itemize
request — żądanie fragmentu, 
\end_layout

\begin_layout Itemize
piece — wiadomość zawierająca fragment torrenta, 
\end_layout

\begin_layout Itemize
cancel — wiadomość anulująca żądanie fragmentu.
 
\end_layout

\begin_layout Subsection
Choking algorithm 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:choking-alg"

\end_inset


\end_layout

\begin_layout Standard
W idealnej sytuacji wymiana plików za pośrednictwem protokołu BitTorrent
 jest sprawiedliwa, to znaczy każdy peer może pobierać pliki, ale jednocześnie
 powinien udostępniać posiadane fragmenty innym.
 By zapobiec sytuacji, w której peer blokuje wysyłanie posiadanych fragmentów,
 wprowadzono odpowiedni algorytm.
 Wykorzystuje on 4 typy wiadomości spośród wspomnianych w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:jak-komunikuja"

\end_inset

.
 Polega on na tym, że dany klient pozwala (unchoke) na pobieranie fragmentów
 od siebie tylko tym peerom, którzy posiadają i udostępnią klientowi swoje
 fragmenty.
 Pobieranie wymaga zatem kooperacji i wymiany interesujących, brakujących
 fragmentów.
 Bez tej wymiany połączenie zostaje przerwane (choke).
 
\end_layout

\begin_layout Subsection
Zalety i wady protokołu
\end_layout

\begin_layout Standard
Wśród zalet protokołu znajduje się przede wszystkim wspomniane na początku
 zmniejszone obciążenie serwera.
 Prędkość pobierania może osiągnąć wyższą wartość niż limit transferu wychodzące
go z serwera — ograniczeniem jest jedynie dostępność pliku wśród peerów
 oraz limit transferu przychodzącego do danego klienta.
 Rozesłanie pliku o rozmiarze 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
m
\end_layout

\end_inset

 do 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
n
\end_layout

\end_inset

 odbiorców bez użycia protokołu wymagałoby transferu danych o rozmiarze
 
\begin_inset Formula $m\cdotp n$
\end_inset

 z węzła udostępniającego, natomiast z użyciem protokołu ilość danych wysłanych
 przez nadawcę mieści się w przedziale 
\begin_inset Formula $\left\langle m;m\cdotp n\right\rangle $
\end_inset

.
 Kolejną zaletą jest możliwość pobierania pliku nawet, jeśli oryginalny
 nadawca (twórca torrenta) jest niedostępny (zakładając oczywiście, że w
 swarmie rozesłane zostały najpierw wszystkie fragmenty pliku) — cecha ta
 okaże się przydatna podczas implementacji komunikatora grupowego.
 
\end_layout

\begin_layout Standard
Do wad protokołu należy zaliczyć zwiększone obciążenie oraz narzut komunikacyjny
 po stronie klienta — konieczność koordynacji pobierania i udostępniania,
 wysyłanie i odbieranie wiadomości kontrolnych.
 Wadą może być sam fakt, że klient zobowiązany jest do udostępniania pobieranego
 pliku.
 Jedną z ważniejszych kwestii, o jakie należy zadbać jest również dostępność
 pliku — klient nie pobierze całego torrenta jeśli nie znajdzie w sieci
 wszystkich jego fragmentów (tak zwany 
\begin_inset Quotes pld
\end_inset

problem ostatniego fragmentu
\begin_inset Quotes prd
\end_inset

).
 Dodatkowo problematyczne może być wyszukanie metapliku .torrent lub magnet
 linku odpowiadającego danemu torrentowi.
 
\end_layout

\begin_layout Standard
Protokół z założenia powinien być w pełni rozproszony i nie polegać na żadnych
 publicznych serwerach — jedynie na bezpośredniej komunikacji użytkowników
 końcowych (P2P).
 Niestety kilka usług serwerowych jest wciąż aktywnie wykorzystywanych do
 prawidłowego działania sieci:
\end_layout

\begin_layout Itemize
serwer hostujący metapliki .torrent lub magnet linki pozwalający na wyszukiwanie
 interesujących plików po nazwie, tagach, innych właściwościach, oferujący
 statystyki torrenta, komentarze itp.
 — może zostać zastąpiony wyszukiwarką torrentów wbudowaną w klienta, który
 wysyła zapytanie do podłączonych peerów, one przekazują je dalej, aż do
 momentu otrzymania odpowiedzi.
\end_layout

\begin_layout Itemize
tracker — istnieją jednak rozwiązania umożliwiające śledzenie swarmu bez
 użycia zewnętrznego serwera np.
 DHT, PEX (Peer Exchange).
\end_layout

\begin_layout Itemize
serwery pośredniczące w nawiązaniu połączenia dwóch klientów ukrytych w
 prywatnych sieciach IP (wykorzystujących translację adresów)
\end_layout

\begin_layout Section
WebTorrent 
\begin_inset CommandInset citation
LatexCommand cite
key "webtorrent"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:webtorrent"

\end_inset


\end_layout

\begin_layout Standard
WebTorrent to biblioteka napisana w języku JavaScript, implementująca protokół
 BitTorrent.
 Dzięki zastosowaniu tego języka możliwe jest użycie protokołu w skrypcie
 wykonywanym w przeglądarce po wejściu na stronę internetową.
 Biblioteki można również użyć jako moduł w programie dla platformy Node.js.
 Funkcjonalność oferowana w obu przypadkach jest niemal identyczna (poza
 kilkoma sytuacjami wynikającymi z ograniczeń danej platformy).
 
\end_layout

\begin_layout Chapter
Architektura
\end_layout

\begin_layout Standard
System komunikatora grupowego będący przedmiotem niniejszej pracy magisterskiej
 został oparty częściowo o architekturę klient-serwer, jednakże rola serwera
 została maksymalnie ograniczona, a częściowo o architekturę rozproszoną
 peer-to-peer (przy użyciu protokołu BitTorrent).
 W pierwszym typie architektury można wyróżnić 3 warstwy logiczne (3-layer
 architecture) — klienty, serwer oraz baza danych.
 Rysunek 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Architektura-komunikatora"

\end_inset

 przedstawia opisywaną architekturę.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/architektura.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Architektura komunikatora 
\begin_inset CommandInset label
LatexCommand label
name "fig:Architektura-komunikatora"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Klient jest aplikacją webową typu Single Page Application.
 Oznacza to, że cały kod źródłowy oraz niezbędne widoki pobierane są z serwera
 przy pierwszym połączeniu.
\end_layout

\begin_layout Standard
Oprócz wspomnianego serwera umożliwiającego pobranie plików HTML, CSS oraz
 JS do działania programu niezbędny jest drugi serwer o architekturze REST.
 Umożliwia on rejestrację i autoryzację użytkowników oraz jest odpowiedzialny
 za tworzenie konwersacji i przydzielanie do nich odpowiednich użytkowników.
\end_layout

\begin_layout Standard
Serwer REST komunikuje się z trzecią warstwą — bazą danych.
 Baza danych typu dokumentowego (NoSQL) przechowuje niezbędne minimum informacji
 o użytkowniku, dzięki którym możliwe jest prowadzenie rozmów.
 
\end_layout

\begin_layout Standard
Kolejnym modułem jest wbudowana w klienta biblioteka WebTorrent do obsługi
 protokołu BitTorrent.
 Pozwala ona na bezpośrednią komunikację pomiędzy klientami.
 Wykorzystywana jest do przekazywania wiadomości.
 
\end_layout

\begin_layout Standard
Z specyfikacji biblioteki i protokołu wynika między innymi konieczność utrzymywa
nia dodatkowych serwerów — trackerów.
 Ze względu na fakt, że biblioteka jest oprogramowaniem open-source, istnieje
 możliwość samodzielnego uruchomienia tego typu serwera, jednak na potrzeby
 testów nie było to konieczne — istnieją w sieci publiczne trackery, z których
 można skorzystać.
\end_layout

\begin_layout Standard
Przedostatnim modułem koniecznym do prawidłowego działania komunikatora
 jest rozproszona tablica mieszająca (DHT) utrzymywana przez klienty, a
 używana do zapisywania i odczytywania info hasha najnowszej wysyłanej wiadomośc
i.
 Klient w momencie rozpoczęcia udostępniania wiadomości zapisuje jej info
 hash w DHT, a odbiorcy mogą go odczytać i rozpocząć pobieranie komunikatu.
 
\end_layout

\begin_layout Standard
Ostatnim potrzebnym elementem są publiczne serwery STUN (Session Traversal
 Utilities for NAT).
 Dzięki nim możliwe jest skomunikowanie ze sobą dwóch klientów znajdujących
 się w sieciach, których ruter stosuje translację adresów.
 Takie serwery również istnieją w sieci więc ich implementacja i uruchomienie
 nie było konieczne.
 Za łączenie się z nimi odpowiedzialna jest biblioteka WebTorrent.
\end_layout

\begin_layout Itemize
webrtc
\end_layout

\begin_layout Itemize
angular
\end_layout

\begin_layout Itemize
python eve jako lekki serwer rest (co robi, że jest też mockiem)
\end_layout

\begin_layout Itemize
p2p
\end_layout

\begin_layout Itemize
bittorent
\end_layout

\begin_layout Itemize
webtorrent
\end_layout

\begin_layout Itemize
planktos - pobieranie strony jako torrent (odciążenie serwera aplikacji)
\end_layout

\begin_layout Itemize
Stun ICE, NAT traversal, 90% wszystkich połączeń, ogromne liczby - to idzie
 w tysiące połączeń na minutę
\end_layout

\begin_deeper
\begin_layout Itemize
https://www.html5rocks.com/en/tutorials/webrtc/infrastructure/
\end_layout

\end_deeper
\begin_layout Itemize
rysunek co jest z czym połączone
\end_layout

\begin_layout Itemize
webrtc w webworkers - póki co nie ma tego https://github.com/w3c/webrtc-pc/issues
/230
\end_layout

\begin_layout Itemize
dht - że to mock
\end_layout

\begin_layout Chapter
Wyniki testów
\end_layout

\begin_layout Chapter
Wnioski
\end_layout

\begin_layout Standard
\start_of_appendix

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
backmatter
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "messenger"

\end_inset

https://pl-pl.messenger.com/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bleep"

\end_inset

http://www.bleep.pm/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "signal"

\end_inset

https://whispersystems.org/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "darkwire"

\end_inset

https://darkwire.io/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "friends"

\end_inset

http://moose-team.github.io/friends/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "tox"

\end_inset

https://tox.chat/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "zeronet"

\end_inset

https://zeronet.readthedocs.io/en/latest/using_zeronet/sample_sites/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bitmessage-main"

\end_inset

https://bitmessage.org/wiki/Main_Page
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bitmessage-pdf"

\end_inset

https://bitmessage.org/bitmessage.pdf
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bittorrent"

\end_inset

http://www.bittorrent.org/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "webtorrent"

\end_inset

https://webtorrent.io/
\end_layout

\end_body
\end_document
